[[_rebasing]]
=== Pag-rebase

(((pag-rebase)))
Sa Git, mayroong dalawang pangunahing mga paraan upang pagsamahin ang mga pagbabago mula sa isang branch patungo sa iba: ang `merge` at ang `rebase`. Sa seksyong ito matututo ka kung ano ang pag-rebase, paano ito gawin, bakit ito ay isang medyo kahanga-hangang kasangkapan, at sa anong kaso mo hindi gugustuhing gamitin ito.

==== Ang Pangunahing Rebase

Kung ikaw ay pupunta pabalik sa kamakailang halimbawa mula sa <<_basic_merging>>, maaari mong tingnan na nahiwalay mo ang iyong trabaho at gumawa ng mga commit sa dalawang magkaibang mga branch.

.Simpleng divergent na kasaysayan
image::images/basic-rebase-1.png[Simpleng divergent na kasaysayan.]

Ang pinakamadaling paraan upang mapagsama ang mga branch, bilang nasakop na natin, ay ang `merge` na utos. Ito ay gumagawa ng isang three-way na merge sa pagitan ng dalawang pinakabagong mga snapshot ng branch (`C3` at `C4`) at ang pinakakamakailang karaniwang ninuno ng dalawa (`C2`), kaya gumagawa ng isang panibagong snapshot (at commit).

.Pag-merge upang mapagsama ang nahiwalay na kasaysayan ng trabaho
image::images/basic-rebase-2.png[Pag-merge upang mapagsama ang nahiwalay na kasaysayan ng trabaho.]

Subalit, mayroong ibang paraan: maaari mong kunin ang patch ng pagbabago na napakilala sa `C4` at ilapat muli ito sa itaas ng `C3`. Sa Git, ito ay tinatawag na _rebasing_. Gamit ang `rebase` na utos, maaari mong kunin ang lahat ng mga pagbabago na na-commit sa isang branch at i-replay ang mga ito sa iba pa.(((git na mga utos, rebase)))

Sa halimbawang ito, papatakbuhin mo ang sumusunod:

[source,console]
----
$ git checkout experiment
$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: added staged command
----

Gumagana ito sa pamamagitan ng pagpunta sa karaniwang ninuno ng dalawang mga branch (yung isa ay kung saan nandoon ka at yung isa ay kung saan ka magre-rebase), kukunin ang diff na napakilala sa bawat commit ng branch kung saan nandoon ka, isi-save ang mga diff na iyon sa pansamantalang mga file, iri-reset ang kasalukuyang branch sa parehong commit bilang branch na iyong iri-rebase, at sa huli ay ilalapat ang bawat pagbabago.

.Pag-rebase ng pagbabago na napakilala sa `C4` patungo sa `C3`
image::images/basic-rebase-3.png[Pag-rebase ng pagbabago na napakilala sa `C4` patungo sa `C3`.]

Sa puntong ito, maaari kang pumunta pabalik sa `master` na branch at gumawa ng fast-forward na merge.

[source,console]
----
$ git checkout master
$ git merge experiment
----

.Pag-fast-forward ng master na branch
image::images/basic-rebase-4.png[Pag-fast-forward ng master na branch.]

Ngayon, ang snapshot na itinuro ng `C4'` ay eksaktong kapareho sa isa na itinuro ng `C5` sa merge na halimbawa. Walang pagkakaiba sa resulta ng integrasyon, ngunit ang pag-rebase ay ginagawang mas malinis ang kasaysayan. Kung iyong susuriin ang log ng isang na-rebase na branch, magmumukha itong isang linear na kasaysayan: lumalabas na ang lahat ng trabaho ay nangyari na nakaserye, kahit ito ay orihinal na nangyari na nakahilera.

Kadalasan, gagawin mo ito upang siguraduhing ang iyong mga commit ay nalapat nang malinis sa isang remote na branch -- marahil sa isang proyekto kung saan sinusubukan mong mag-ambag ngunit iyong hindi mo na pinapanatili. Sa kasong ito, gagawin mo ang iyong trabaho sa isang branch at pagkatapos ay iri-rebase ang iyong trabaho sa `origin/master` kapag ikaw ay handa nang isumite ang iyong mga patch sa pangunahing proyekto. Sa paraan iyon, ang tagapanatili ay hindi na kailangang gumawa ng anumang pagsasama na trabaho -- isang fast-forward o isang malinis na paglapat lamang.

Tandaan na ang snapshot na itinuro ng huling commit na nagtapos sa iyo, kung ito ay ang huli sa na-rebase na mga commit para sa isang rebase o ang huling merge na commit pagkatapos ng isang merge, ay ang parehong snapshot - ang kasaysayan lamang ang naiiba. Ang pag-rebase ay iri-replay ang mga pagbabago mula sa isang linya ng trabaho patungo sa iba sa pagkakaayos base sa kanilang pagpakilala, samantalang ang pag-merge ay kinukuha ang mga endpoint at sama-samang imi-merge ang mga ito.

==== Maraming Kagiliw-giliw na mga Rebase

Maaari ka ring magkaroon ng iyong rebase na replay sa anuman maliban sa rebase na target na branch. Gamitin ang isang kasaysayan katulad ng <<rbdiag_e>>, bilang halimbawa. Ikaw ay nag-branch ng isang paksa na branch (`server`) upang magdagdag ng ilang server-side na functionality sa iyong proyekto, at gumawa ng isang commit. Pagkatapos, ikaw ay nag-branch off nito upang gawin ang mga pagbabago sa client-side (`client`) at nag-commit ng ilang beses. Sa wakas, ikaw ay bumalik sa iyong server na branch at gumawa ng ilang mga commit.

[[rbdiag_e]]
.Isang kasaysayan na may isang paksa na naka-branch off sa ibang paksa na branch
image::images/interesting-rebase-1.png[Isang kasaysayan na may isang paksa na naka-branch off sa ibang paksa na branch.]

Ipagpalagay na ikaw na nakapagpasya na gusto mong i-merge ang iyong client-side na mga pagbabago sa iyong mainline para sa isang release, ngunit gusto mong pigilan ang mga pagbabago ng server-side hanggang ito ay mas lalo pang nasubukan. Maaari mong kunin ang mga pagbabago na wala sa server (`C8` at `C9`) at i-replay ang mga ito sa iyong `master` na branch gamit ang `--onto` na opsyon ng `git rebase`:

[source,console]
----
$ git rebase --onto master server client
----

Ang ibig talagang sabihin nito ay, ``Kunin ang `client` na branch, alamin ang mga patch mula nung humiwalay ito mula sa `server` na branch, at i-replay ang mga patch na ito sa `client` na branch animo ito ay direktang nakabase sa `master` na branch.'' Ito ay medyo kumplikado, ngunit ang resulta ay talagang kamangha-mangha.

.Pag-rebase ng isang paksa na naka-branch off sa ibang paksa na branch
image::images/interesting-rebase-2.png[Pag-rebase ng isang paksa na naka-branch off sa ibang paksa na branch.]

Ngayon maaari ka nang mag-fast-forward sa iyong `master` na branch (tingnan ang <<rbdiag_g>>):

[source,console]
----
$ git checkout master
$ git merge client
----

[[rbdiag_g]]
.Pag-fast-forward ng iyong master na branch upang isama ang mga pagbabago sa kliyente na branch
image::images/interesting-rebase-3.png[Pag-fast-forward ng iyong master na branch upang isama ang mga pagbabago sa kliyente na branch.]

Sabihin nating ikaw ay nakapagpasyang mag-pull din sa iyong server na branch. Maaari mong i-rebase ang server na branch sa `master` na branch nang hindi kailangang unang mag-check out nito sa pamamagitan ng pagpapatakbo ng `git rebase <basebranch> <topicbranch>` -- na nagchi-check out ng paksa na branch (sa kasong ito, `server`) para sa iyo at iri-replay ito sa base na branch (`master`):

[source,console]
----
$ git rebase master server
----

Ito ay iri-replay ang iyong `server` na trabaho sa itaas ng iyong `master` na trabaho, na ipinapakita sa <<rbdiag_h>>.

[[rbdiag_h]]
.Pag-rebase ng iyong server na branch sa itaas ng iyong master na branch
image::images/interesting-rebase-4.png[Pag-rebase ng iyong server na branch sa itaas ng iyong master na branch.]

Pagkatapos, maaari mong i-fast-forward ang base na branch (`master`):
Then, you can fast-forward the base branch (`master`):

[source,console]
----
$ git checkout master
$ git merge server
----

Maaari mong tanggalin ang `client` at `server` na mga branch dahil lahat ang trabaho ay napagsama-sama na at hindi mo na kailangan ang mga ito, iniiwan ang iyong kasaysayan para sa buong proseso na nagmumukhang katulad ng <<rbdiag_i>>:

[source,console]
----
$ git branch -d client
$ git branch -d server
----

[[rbdiag_i]]
.Huling kasaysayan ng commit
image::images/interesting-rebase-5.png[Huling kasaysayan ng commit.]

[[_rebase_peril]]
==== Ang mga Panganib ng Pag-rebase

(((pag-rebase, mga panganib ng)))
Ahh, ngunit ang kaligayahan ng pag-rebase ay mayroon ding kakulangan, na maaaring mabuo sa isang linya:

*Huwag mag-rebase ng mga commit na umiiral sa labas ng iyong repositoryo.*

Kung susundin mo ang patnubay na iyon, magiging maayos ka. Kung hindi, kasusuklaman ka ng mga tao, at kakamuhian ka ng iyong mga kaibigan at pamilya.

When you rebase stuff, you're abandoning existing commits and creating new ones that are similar but different.
If you push commits somewhere and others pull them down and base work on them, and then you rewrite those commits with `git rebase` and push them up again, your collaborators will have to re-merge their work and things will get messy when you try to pull their work back into yours.

Let's look at an example of how rebasing work that you've made public can cause problems.
Suppose you clone from a central server and then do some work off that.
Your commit history looks like this:

.Clone a repository, and base some work on it
image::images/perils-of-rebasing-1.png["Clone a repository, and base some work on it."]

Now, someone else does more work that includes a merge, and pushes that work to the central server.
You fetch it and merge the new remote branch into your work, making your history look something like this:

.Fetch more commits, and merge them into your work
image::images/perils-of-rebasing-2.png["Fetch more commits, and merge them into your work."]

Next, the person who pushed the merged work decides to go back and rebase their work instead; they do a `git push --force` to overwrite the history on the server.
You then fetch from that server, bringing down the new commits.

[[_pre_merge_rebase_work]]
.Someone pushes rebased commits, abandoning commits you've based your work on
image::images/perils-of-rebasing-3.png["Someone pushes rebased commits, abandoning commits you've based your work on."]

Now you're both in a pickle.
If you do a `git pull`, you'll create a merge commit which includes both lines of history, and your repository will look like this:

[[_merge_rebase_work]]
.You merge in the same work again into a new merge commit
image::images/perils-of-rebasing-4.png[You merge in the same work again into a new merge commit.]

If you run a `git log` when your history looks like this, you'll see two commits that have the same author, date, and message, which will be confusing.
Furthermore, if you push this history back up to the server, you'll reintroduce all those rebased commits to the central server, which can further confuse people.
It's pretty safe to assume that the other developer doesn't want `C4` and `C6` to be in the history; that's why they rebased in the first place.

[[_rebase_rebase]]
==== Rebase When You Rebase

If you *do* find yourself in a situation like this, Git has some further magic that might help you out.
If someone on your team force pushes changes that overwrite work that you've based work on, your challenge is to figure out what is yours and what they've rewritten.

It turns out that in addition to the commit SHA-1 checksum, Git also calculates a checksum that is based just on the patch introduced with the commit.
This is called a ``patch-id''.

If you pull down work that was rewritten and rebase it on top of the new commits from your partner, Git can often successfully figure out what is uniquely yours and apply them back on top of the new branch.

For instance, in the previous scenario, if instead of doing a merge when we're at <<_pre_merge_rebase_work>> we run `git rebase teamone/master`, Git will:

* Determine what work is unique to our branch (C2, C3, C4, C6, C7)
* Determine which are not merge commits (C2, C3, C4)
* Determine which have not been rewritten into the target branch (just C2 and C3, since C4 is the same patch as C4')
* Apply those commits to the top of `teamone/master`

So instead of the result we see in <<_merge_rebase_work>>, we would end up with something more like <<_rebase_rebase_work>>.

[[_rebase_rebase_work]]
.Rebase on top of force-pushed rebase work.
image::images/perils-of-rebasing-5.png[Rebase on top of force-pushed rebase work.]

This only works if C4 and C4' that your partner made are almost exactly the same patch.
Otherwise the rebase won't be able to tell that it's a duplicate and will add another C4-like patch (which will probably fail to apply cleanly, since the changes would already be at least somewhat there).

You can also simplify this by running a `git pull --rebase` instead of a normal `git pull`.
Or you could do it manually with a `git fetch` followed by a `git rebase teamone/master` in this case.

If you are using `git pull` and want to make `--rebase` the default, you can set the `pull.rebase` config value with something like `git config --global pull.rebase true`.

If you treat rebasing as a way to clean up and work with commits before you push them, and if you only rebase commits that have never been available publicly, then you'll be fine.
If you rebase commits that have already been pushed publicly, and people may have based work on those commits, then you may be in for some frustrating trouble, and the scorn of your teammates.

If you or a partner does find it necessary at some point, make sure everyone knows to run `git pull --rebase` to try to make the pain after it happens a little bit simpler.

==== Rebase vs. Merge

(((rebasing, vs. merging)))(((merging, vs. rebasing)))
Now that you've seen rebasing and merging in action, you may be wondering which one is better.
Before we can answer this, let's step back a bit and talk about what history means.

One point of view on this is that your repository's commit history is a *record of what actually happened.*
It's a historical document, valuable in its own right, and shouldn't be tampered with.
From this angle, changing the commit history is almost blasphemous; you're _lying_ about what actually transpired.
So what if there was a messy series of merge commits?
That's how it happened, and the repository should preserve that for posterity.

The opposing point of view is that the commit history is the *story of how your project was made.*
You wouldn't publish the first draft of a book, and the manual for how to maintain your software deserves careful editing.
This is the camp that uses tools like rebase and filter-branch to tell the story in the way that's best for future readers.

Now, to the question of whether merging or rebasing is better: hopefully you'll see that it's not that simple.
Git is a powerful tool, and allows you to do many things to and with your history, but every team and every project is different.
Now that you know how both of these things work, it's up to you to decide which one is best for your particular situation.

In general the way to get the best of both worlds is to rebase local changes you've made but haven't shared yet before you push them in order to clean up your story, but never rebase anything you've pushed somewhere.
