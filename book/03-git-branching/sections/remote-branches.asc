[[_remote_branches]]
=== Remote Branches

(((branches, remote)))(((references, remote)))
Remote references are references (pointers) in your remote repositories, including branches, tags, and so on.
You can get a full list of remote references explicitly with `git ls-remote [remote]`, or `git remote show [remote]` for remote branches as well as more information.
Nevertheless, a more common way is to take advantage of remote-tracking branches.

Remote-tracking branches are references to the state of remote branches.
They're local references that you can't move; Git moves them for you whenever you do any network communication, to make sure they accurately represent the state of the remote repository.
Think of them as bookmarks, to remind you where the branches in your remote repositories were the last time you connected to them.

Remote-tracking branches take the form `<remote>/<branch>`.
For instance, if you wanted to see what the `master` branch on your `origin` remote looked like as of the last time you communicated with it, you would check the `origin/master` branch.
If you were working on an issue with a partner and they pushed up an `iss53` branch, you might have your own local `iss53` branch, but the branch on the server would be represented by the remote-tracking branch `origin/iss53`.

This may be a bit confusing, so let's look at an example.
Let's say you have a Git server on your network at `git.ourcompany.com`.
If you clone from this, Git's `clone` command automatically names it `origin` for you, pulls down all its data, creates a pointer to where its `master` branch is, and names it `origin/master` locally.
Git also gives you your own local `master` branch starting at the same place as origin's `master` branch, so you have something to work from.

[NOTE]
.``origin'' is not special
====
Just like the branch name ``master'' does not have any special meaning in Git, neither does ``origin''.
While ``master'' is the default name for a starting branch when you run `git init` which is the only reason it's widely used, ``origin'' is the default name for a remote when you run `git clone`.
If you run `git clone -o booyah` instead, then you will have `booyah/master` as your default remote branch.(((origin)))
====

.Server and local repositories after cloning
image::images/remote-branches-1.png[Server and local repositories after cloning.]

If you do some work on your local `master` branch, and, in the meantime, someone else pushes to `git.ourcompany.com` and updates its `master` branch, then your histories move forward differently.
Also, as long as you stay out of contact with your origin server, your `origin/master` pointer doesn't move.

.Local and remote work can diverge
image::images/remote-branches-2.png[Local and remote work can diverge.]

To synchronize your work, you run a `git fetch origin` command.
This command looks up which server ``origin'' is (in this case, it's `git.ourcompany.com`), fetches any data from it that you don't yet have, and updates your local database, moving your `origin/master` pointer to its new, more up-to-date position.

.`git fetch` updates your remote references
image::images/remote-branches-3.png[`git fetch` updates your remote references.]

To demonstrate having multiple remote servers and what remote branches for those remote projects look like, let's assume you have another internal Git server that is used only for development by one of your sprint teams.
This server is at `git.team1.ourcompany.com`.
You can add it as a new remote reference to the project you're currently working on by running the `git remote add` command as we covered in <<_git_basics_chapter#_git_basics_chapter>>.
Name this remote `teamone`, which will be your shortname for that whole URL.

.Adding another server as a remote
image::images/remote-branches-4.png[Adding another server as a remote.]

Now, you can run `git fetch teamone` to fetch everything the remote `teamone` server has that you don't have yet.
Because that server has a subset of the data your `origin` server has right now, Git fetches no data but sets a remote-tracking branch called `teamone/master` to point to the commit that `teamone` has as its `master` branch.

.Remote tracking branch for `teamone/master`
image::images/remote-branches-5.png[Remote tracking branch for `teamone/master`.]

[[_pushing_branches]]
==== Pushing

(((pushing)))
When you want to share a branch with the world, you need to push it up to a remote that you have write access to.
Your local branches aren't automatically synchronized to the remotes you write to -- you have to explicitly push the branches you want to share.
That way, you can use private branches for work you don't want to share, and push up only the topic branches you want to collaborate on.

If you have a branch named `serverfix` that you want to work on with others, you can push it up the same way you pushed your first branch.
Run `git push <remote> <branch>`:(((git commands, push)))

[source,console]
----
$ git push origin serverfix
Counting objects: 24, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (15/15), done.
Writing objects: 100% (24/24), 1.91 KiB | 0 bytes/s, done.
Total 24 (delta 2), reused 0 (delta 0)
To https://github.com/schacon/simplegit
 * [new branch]      serverfix -> serverfix
----

This is a bit of a shortcut.
Git automatically expands the `serverfix` branchname out to `refs/heads/serverfix:refs/heads/serverfix`, which means, ``Take my serverfix local branch and push it to update the remote's serverfix branch.''
We'll go over the `refs/heads/` part in detail in <<_git_internals#_git_internals>>, but you can generally leave it off.
You can also do `git push origin serverfix:serverfix`, which does the same thing -- it says, ``Take my serverfix and make it the remote's serverfix.''
You can use this format to push a local branch into a remote branch that is named differently.
If you didn't want it to be called `serverfix` on the remote, you could instead run `git push origin serverfix:awesomebranch` to push your local `serverfix` branch to the `awesomebranch` branch on the remote project.

[NOTE]
.Don't type your password every time
====
If you're using an HTTPS URL to push over, the Git server will ask you for your username and password for authentication.
By default it will prompt you on the terminal for this information so the server can tell if you're allowed to push.

If you don't want to type it every single time you push, you can set up a ``credential cache''.
The simplest is just to keep it in memory for a few minutes, which you can easily set up by running `git config --global credential.helper cache`.

For more information on the various credential caching options available, see <<_git_tools#_credential_caching>>.
====

The next time one of your collaborators fetches from the server, they will get a reference to where the server's version of `serverfix` is under the remote branch `origin/serverfix`:

[source,console]
----
$ git fetch origin
remote: Counting objects: 7, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://github.com/schacon/simplegit
 * [new branch]      serverfix    -> origin/serverfix
----

Importanteng tandaan na kagpag ikaw ay gumawa ng isang fetch na humihila pababa ng bagong remote-tracking na mga branch, hindi ka awtomatikong magkakaroon ng lokal, mababagong mga kopya nito. Sa ibang mga salita, sa kasong ito, wala kang isang bagong `serverfix` na branch -- mayroon ka lang isang `origin/serverfix` na pointer na hindi mo mababago.

Upnag ma-merge ang trabahong ito sa iyong kasalukuyang tinatrabahong branch, maaari mong patakbuhin ang `git merge origin/serverfix`. Kung gusto mong magkaroon ng sariling `serverfix` na branch kung saan ka pwedeng magtrabaho, maaari kang mag-base nito sa iyong remote-tracking na branch:

[source,console]
----
$ git checkout -b serverfix origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Ito ay nagbibigay sa iyo ng isang lokal na branch na kung saan maaari kang magtrabaho na nagsisimula kung saan ang `origin/serverfix`.

[[_tracking_branches]]
==== Sumusubaybay na mga Branch

(((mga branch, pagsusubabay)))(((mga branch, upstream)))
Ang pag-check out ng isang lokal na branch mula sa isang remote-tracking na branch ay awtomatikong gumagawa ng kung tawagin ay isang ``sumusubaybay branch'' (at ang branch na sinusubaybayan ay tinatawag na isang ``upstream branch''). Ang sumusubaybay na mga branch ay lokal na mga branch na may isang direktang relasyon sa isang remote na branch. Kung ikaw ay nasa sumusubaybay na branch at magta-type ng `git pull`, ang Git ay awtomatikong nalalaman kung anong server ang ipi-fetch at branch na imi-merge.

Kapag ikaw ay magko-clone ng isang repositoryo, ito ay kadalasang awtomatikong gumagawa ng isang `master` na branch na sumusubaybay sa `origin/master`. Samantala, maaari kang magtalaga ng ibang sumusubaybay na mga branch kung gugustuhin mo -- yung mga sumusubaybay ng mga branch sa ibang mga remote, o huwag subaybayan ang `master` na branch. Ang simpleng kaso ay ang halimbawa na nakita mo kamakailan lamang, ang pagpapatakbo ng `git checkout -b <branch> <remote>/<branch>`. Ito ay isang karaniwang sapat na operasyon na ibinibigay ng Git ay ang `--track` na takigrapya:

[source,console]
----
$ git checkout --track origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Sa katunayan, ito ay sobrang karaniwan na mayroon ding isang takigrapya para sa daang tuwiran na iyon. Kung ang pangalan ng branch na sinusubukan mong i-checkout (a) ay hindi umiiral at ang (b) ay eksaktong tumutugma sa isang pangalan sa isang remote lamang, ang Git ay gagawa ng isang sumusubaybay na branch para sa iyo:

[source,console]
----
$ git checkout serverfix
Branch serverfix set up to track remote branch serverfix from origin.
Switched to a new branch 'serverfix'
----

Upang magtakda ng isang lokal na branch gamit ang isang naiibang pangalan kaysa sa remote branch, maaaring madali mong magamit ang unang bersyon gamit ang isang naiibang lokal na pangalan ng branch:

[source,console]
----
$ git checkout -b sf origin/serverfix
Branch sf set up to track remote branch serverfix from origin.
Switched to a new branch 'sf'
----

Ngayon, ang iyong lokal na branch na `sf` ay awtomatikong magpu-pull mula sa `origin/serverfix`.

Kung ikaw ay mayroon nang isang lokal na branch at gustong itakda ito sa isang remote na branch na iyong na pull pababa, o gustong baguhin ang upstream na branch na iyong sinusubaybayan, maaari mong gamitin ang `-u` o `--set-upstream-to` na opsyon sa `git branch` upang tahasang itakda ito sa anumang panahon.

[source,console]
----
$ git branch -u origin/serverfix
Branch serverfix set up to track remote branch serverfix from origin.
----

[TANDAAN]
.Upstream na takigrapya
====
Kapag mayroon kang isang sumusubaybay na branch na naitakda, maaari mong ireperensya ang upstream na branch nito gamit ang `@{upstream}` o `@{u}` na takigrapya. Kaya kung ikaw ay nasa `master` na branch at ito ay sumusubaybay sa `origin/master`, maaari kang magsabi ng anuman katulad ng `git merge @{u}` sa halip ng `git merge origin/master` kung gugustuhin mo.(((+++@{u}+++)))(((+++@{upstream}+++)))
====

Kung gusto mong tingnan kung anong sumusubaybay na mga branch ang naitakda mo, maaari mong gamitin ang `-vv` na opsyon sa `git branch`. Ito ay ililista ang iyong lokal na mga branch na may maraming impormasyon na naglalaman ng kung ano ang sinusubaybayan ng bawat branch at kung ang iyong lokal na branch ay nauuna, nahuhuli, o pareho.

[source,console]
----
$ git branch -vv
  iss53     7e424c3 [origin/iss53: ahead 2] forgot the brackets
  master    1ae2a45 [origin/master] deploying index fix
* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] this should do it
  testing   5ea463a trying something new
----

Kaya dito ay makikita natin ang ating `iss53` na branch na sumusubaybay sa `origin/iss53` at ``nauuna'' ng dalawa, nangangahulugang may dalawang commit sa lokal na hindi pa na-push sa server. Maaari rin nating tingnan kung ang ating `master` na branch ay sumusubaybay sa `origin/master` at napapanahon. Susunod nakikita natin na ang ating `serverfix` na branch ay sumusubaybay sa `server-fix-good` na branch sa ating `teamone` na server at nauuna ng tatlo at nahuhuli ng isa, nangangahulugan na may isang commit sa server na hindi pa natin na merge at tatlong mga commit na nasa lokal na hindi pa natin na-push. Sa huli makikita natin na ang ating `testing` na branch ay hindi sumusubaybay ng anumang remote na branch.

Importanteng tandaan na ang mga ito ay numero lamang mula noong huling panahon na nag-fetch ka mula sa bawat server. Ang utos na ito hindi umaabot sa mga server, at sinasabi nito sa iyon ang tungkol sa kung ano ang lokal na na-cache nito mula sa mga server na ito. Kung gusto mong buong napapanahon na nauuna at nahuhuli sa mga numero, kailangan mong mag-fetch mula sa lahat ng iyong mga remote bago mo patakbuhin ito. Maaari mong gawin iyon kagaya nito:

[source,console]
----
$ git fetch --all; git branch -vv
----

==== Pag-pull

(((pag-pull)))
Habang ang `git fetch` na utos ay magpi-fetch pababa ng lahat ng mga pagbabago sa server na hindi pa nasa iyo, hindi nito babaguhin ang iyong tinatrabaho na direktoryo. Ito ay simpleng kukunin ang data para sa iyo at hahayaan kang i-merge ito. Samantala, mayroong isang utos na tinatawag na `git pull` na tunay na isang `git fetch` na kaagad na sinusundan ng isang `git merge` sa kadalasang kaso. Kung ikaw ay may isang sumusubaybay na branch na nakatakda base sa ipinakita sa huling seksyon, alinman sa pamamagitan ng tahas na pagtakda nito o sa pamamagitan ng paggawa nito para sa iyo gamit ang `clone` o `checkout` na utos, ang `git pull` ay hahanapin kung anong server at branch ang sinusubaybayan ng iyong kasalukuyang branch, mag-fetch mula sa server na iyon at pagkatapos ay susubukang i-merge ang remote na branch na iyon.

Sa pangkalahatan mas mabuti na simpleng gamitin ang `fetch` at `merge` na mga utos nang tahasan dahil ang mahika ng `git pull` ay maaaring nakakalito.

[[_delete_branches]]
==== Pagbubura ng Remote na mga Branch

(((mga branch, pagbubura ng remote)))
Ipagpalagay na natapos ka na sa isang remote na branch – sabihing ikaw at ang iyong mga katulong ay natapos na sa isang tampok at na-merge ito sa iyong `master` na branch ng remote (o anumang branch kung saan nandoon ang iyong matatag na codeline). Maaari mong burahin ang isang remote na branch gamit ang `--delete` na opsyon sa `git push`. Kung gusto mong burahin ang iyong `serverfix` na branch mula sa server, patakbuhin mo ang sumusunod:

[source,console]
----
$ git push origin --delete serverfix
To https://github.com/schacon/simplegit
 - [deleted]         serverfix
----

Talagang lahat ng ginagawa nito ay magtanggal ng pointer mula sa server. Ang Git na server ay kadalasang pinapanatili ang data doon sa isang saglit hanggang ang isang koleksyon ng basura ay tatakbo, kaya kung ito ay aksidenteng nabura, ito ay kadalasang madaling bawiin.
