=== Graphical Interfaces

(((GUIs)))(((Graphical tools)))
Ang nitibong environment ng Git ay nasa terminal.
Ang mga bagong tampok ay ipapakita muna roon, at tanging sa command line ay ang buong lakas ng Git na lubos sa iyong pamamahala.
Ngunit ang plain text ay hindi ang pinakamahusay na pagpipilian para sa lahat ng mga gawain; kung minsan ang isang biswall na representasyon ay ang iyong kailangan, at ang ilang mga gumagamit ay mas kumportable sa isang interface ng point-and-click.

Mahalagang tandaan na ang iba't ibang mga interface ay natatangi para sa iba't-ibang mga workflow.
Ang ilang mga kliyente ay naglalantad lamang ng maingat na na-curate na subset ng Git functionality, upang suportahan ang isang partikular na paraan ng paggawa na itinuturing ng may-akda na epektibo.
Kapag tiningnan sa liwanag na ito, wala sa mga tool na ito ay maaaring masabi na ``mas mabuti'' kaysa sa iba pa, ang mga ito ay mas angkop sa kanilang layunin.
Tandaan din na wala sa mga graphical na kliyente na maaaring gawin na ang command-line client ay hindi kaya; ang command-line ay pa rin kung saan magkakaroon ka ng pinaka makapangyarihan at kontrol kapag gumagawa sa iyong mga repository.

==== `gitk` at `git-gui`

(((git commands, gitk)))(((git commands, gui)))(((gitk)))
Kapag nag-install ka ng Git, nakakuha ka rin ng mga visual na tool nito, `gitk` at `git-gui`.

`gitk` ay isang graphical viewer ng kasaysayan.
Isipin ito tulad ng isang malakas na shell ng GUI sa `git log` at `git grep`.
Ito ang tool na gagamitin kapag sinusubukan mong maghanap ng isang bagay na nangyari sa nakaraan, o maisalarawan ang kasaysayan ng iyong proyekto.

Ang Gitk ay pinakamadaling tawagin mula sa command-line.
`cd` lamang sa isang repository ng Git, at i-type:

[source,console]
----
$ gitk [git log options]
----

Tinatanggap ng Gitk ang maraming mga opsyon sa command line, na karamihan ay naipasa sa pinagbabatayan na aksyon ng `git log`.
Marahil ang isa sa mga pinaka-kapaki-pakinabang ay ang `--all` na flag, na nagsasabi sa gitk na ipakita ang mga commit na mula sa _any_ ref, hindi lamang HEAD.
Mukhang ganito ang interface ng Gitk:

.The `gitk` history viewer.
image::images/gitk.png[The `gitk` history viewer.]

Sa itaas ay isang bagay na mukhang medyo katulad ng output ng `git log - graph`; ang bawat tuldok ay kumakatawan sa isang commit, ang mga linya ay kumakatawan sa mga relasyon ng parent, at ang mga ref ay ipinapakita bilang mga kulay na mga kahon.
Ang dilaw na tuldok ay kumakatawan sa HEAD, at ang pulang tuldok ay kumakatawan sa mga pagbabago na hindi pa magiging isang commit.
Sa ibaba ay isang tanawin sa napiling commit; ang mga komento at patch sa kaliwa, at isang buod na tanawin sa kanan.
Sa pagitan ay isang koleksyon ng mga kontrol na ginagamit para sa kasaysayan ng paghahanap.

Ang `git-gui`, sa kabilang banda, ay pangunahing tool para sa paggawa ng mga commit.
Ito rin, ay pinakamadaling tawagin mula sa command line:

[source,console]
-----
$ git gui
-----

At mukhang ganito:

.The `git-gui` commit tool.
image::images/git-gui.png[The `git-gui` commit tool.]

Sa kaliwa ay ang index; unstaged na mga pagbabago ay nasa itaas, staged na mga pagbabago sa ibaba.
Maaari mong ilipat ang buong mga file sa pagitan ng dalawang estado sa pamamagitan ng pagpindot sa kanilang mga icon, o maaari kang pumili ng isang file para sa pagpapakita sa pamamagitan ng pagpindot sa pangalan nito.

Sa itaas na kanan ay ang diff na view, na nagpapakita ng mga pagbabago para sa kasalukuyang napiling file.
Maaari mong i-stage ang mga indibidwal na hunks (o mga indibidwal na linya) sa pamamagitan ng pagpindot sa kanang bahagi nito.

Sa kanang ibaba ay ang mensahe at aksyon ng lawak.
I-type ang iyong mensahe sa text box at pindotin ang ``Commit'' upang magawa ang isang bagay na katulad ng `git commit`.
Maaari mo ring piliin na baguhin ang huling commit sa pamamagitan ng pagpili ng radio button na ``Amend'', na kung saan ay i-update ang bahagi ng ``Mga Staged na Pagbabago' sa mga nilalaman ng huling commit.
Pagkatapos ay maaari mo i-stage o unstage ang ilang mga pagbabago, baguhin ang commit na mensahe, at pindotin muli ang ``Commit' upang palitan ang lumang commit ng bago.

`gitk` and `git-gui` are examples of task-oriented tools.
Each of them is tailored for a specific purpose (viewing history and creating commits, respectively), and omit the features not necessary for that task.


==== GitHub for Mac and Windows

(((GitHub for Mac)))(((GitHub for Windows)))
GitHub has created two workflow-oriented Git clients: one for Windows, and one for Mac.
These clients are a good example of workflow-oriented tools – rather than expose _all_ of Git's functionality, they instead focus on a curated set of commonly-used features that work well together.
They look like this:

.GitHub for Mac.
image::images/github_mac.png[GitHub for Mac.]

.GitHub for Windows.
image::images/github_win.png[GitHub for Windows.]

They are designed to look and work very much alike, so we'll treat them like a single product in this chapter.
We won't be doing a detailed rundown of these tools (they have their own documentation), but a quick tour of the ``changes'' view (which is where you'll spend most of your time) is in order.

* On the left is the list of repositories the client is tracking; you can add a repository (either by cloning or attaching locally) by clicking the ``+'' icon at the top of this area.
* In the center is a commit-input area, which lets you input a commit message, and select which files should be included.
  (On Windows, the commit history is displayed directly below this; on Mac, it's on a separate tab.)
* On the right is a diff view, which shows what's changed in your working directory, or which changes were included in the selected commit.
* The last thing to notice is the ``Sync'' button at the top-right, which is the primary way you interact over the network.

[NOTE]
====
You don't need a GitHub account to use these tools.
While they're designed to highlight GitHub's service and recommended workflow, they will happily work with any repository, and do network operations with any Git host.
====

===== Installation

GitHub for Windows can be downloaded from https://windows.github.com[], and GitHub for Mac from https://mac.github.com[].
When the applications are first run, they walk you through all the first-time Git setup, such as configuring your name and email address, and both set up sane defaults for many common configuration options, such as credential caches and CRLF behavior.

Both are ``evergreen'' – updates are downloaded and installed in the background while the applications are open.
This helpfully includes a bundled version of Git, which means you probably won't have to worry about manually updating it again.
On Windows, the client includes a shortcut to launch Powershell with Posh-git, which we'll talk more about later in this chapter.

The next step is to give the tool some repositories to work with.
The client shows you a list of the repositories you have access to on GitHub, and can clone them in one step.
If you already have a local repository, just drag its directory from the Finder or Windows Explorer into the GitHub client window, and it will be included in the list of repositories on the left.

===== Recommended Workflow

Once it's installed and configured, you can use the GitHub client for many common Git tasks.
The intended workflow for this tool is sometimes called the ``GitHub Flow.''
We cover this in more detail in <<_github#_github_flow>>, but the general gist is that (a) you'll be committing to a branch, and (b) you'll be syncing up with a remote repository fairly regularly.

Branch management is one of the areas where the two tools diverge.
On Mac, there's a button at the top of the window for creating a new branch:

.``Create Branch'' button on Mac.
image::images/branch_widget_mac.png[``Create Branch'' button on Mac.]

On Windows, this is done by typing the new branch's name in the branch-switching widget:

.Creating a branch on Windows.
image::images/branch_widget_win.png[Creating a branch on Windows.]

Once your branch is created, making new commits is fairly straightforward.
Make some changes in your working directory, and when you switch to the GitHub client window, it will show you which files changed.
Enter a commit message, select the files you'd like to include, and click the ``Commit'' button (ctrl-enter or ⌘-enter).

The main way you interact with other repositories over the network is through the ``Sync'' feature.
Git internally has separate operations for pushing, fetching, merging, and rebasing, but the GitHub clients collapse all of these into one multi-step feature.
Here's what happens when you click the Sync button:

. `git pull --rebase`.
  If this fails because of a merge conflict, fall back to `git pull --no-rebase`.
. `git push`.

This is the most common sequence of network commands when working in this style, so squashing them into one command saves a lot of time.

===== Summary

These tools are very well-suited for the workflow they're designed for.
Developers and non-developers alike can be collaborating on a project within minutes, and many of the best practices for this kind of workflow are baked into the tools.
However, if your workflow is different, or you want more control over how and when network operations are done, we recommend you use another client or the command line.


==== Other GUIs

There are a number of other graphical Git clients, and they run the gamut from specialized, single-purpose tools all the way to apps that try to expose everything Git can do.
The official Git website has a curated list of the most popular clients at http://git-scm.com/downloads/guis[].
A more comprehensive list is available on the Git wiki site, at https://git.wiki.kernel.org/index.php/Interfaces,_frontends,_and_tools#Graphical_Interfaces[].
