=== Pag-aambag sa isang Proyekto

Ngayon na na-set up na ang ating account, tingnan natin ang ilang mga detalye na maaaring kapaki-pakinabang sa pagtulong sa iyo na mag-ambag sa isang umiiral na proyekto.

==== Pag-fork ng mga Proyekto

(((forking)))
Kung gusto mong mag-ambag sa isang umiiral na proyekto na wala kang access sa pag-push, maaari kang mag-``fork'' sa proyekto.
Kapag ikaw ay nag-``fork'' ng isang proyekto, gagawan ka ng GitHub ng kopya sa proyekto na ganap na sa iyo; ito ay nasa iyong namespace, at maaari kang mag-push dito.

[TANDAAN]
====
Sa kasaysayan, ang termino na ``fork'' ay medyo negatibo sa konteksto, ibig sabihin na may kumuha sa isang open-source na proyekto sa isang ibang direksiyon, na minsan ay lumilikha ng pakikipagkumpitensya sa proyekto at paghahati sa mga nag-aambag.
Sa GitHub, ang ``fork'' ay ang parehong proyekto lamang sa iyong sariling namespace, nagbibigay-daan sa iyo na pampublikong gumawa ng mga pagbabago sa isang proyekto bilang isang paraan na mag-ambag sa isang mas bukas na pamamaraan.
====

Sa paraang ito, hindi na kailangan mag-alala ng mga proyekto tungkol sa pagdagdag ng mga user bilang mga tagatulong na bigyan sila ng access sa pag-push.
Maaari mag-force ang mga tao sa isang proyekto, mag-push dito, at mag-ambag sa kanilang mga pagbabago pabalik sa kanilang orihinal na repositoryo sa pamamagitan ng paglilikha ng tinatawag na Kahilingan na Pull, na ating itatalakay sa susunod.
Ito ay nagbubukas ng isang thread ng diskusyon sa pagsusuri ng code, at ang may-ari at nag-aambag ay maaari makikipag-usap tungkol sa pagbabago hanggang ang may-ari ay masaya dito, kung saan ang may-ari ay maaaring pagsamahin ito.

Para ma-fork ang isang proyekto, bisitahin ang pahina ng proyekto at i-click ang pindutan na ``Fork'' na nasa kanang itaas ng pahina.

.Ang ``Fork'' na pindutan.
image::images/forkbutton.png[Ang ``Fork'' na pindutan.]

Pagkatapos ng ilang segundo, dadalhin ka sa pahina ng iyong bagong proyekto, na may sariling kopya ng code na maaaring mabago.


[[_github_flow]]
==== Ang Daloy ng GitHub

(((GitHub, Flow)))
Ang GitHub ay dinisenyo sa paligid ng isang partikular na workflow sa pakikipagtulungan, nakasentro sa mga Kahilingan na Pull.
Ang daloy na ito ay gumagana kung nakikipagtulungan ka sa isang mahigpit na pangkat sa isang solong ibinahaging repositoryo, o isang kompanyang ibinahagi sa mundo o network ng mga estranghero na nag-aambag sa isang proyekto sa pamamagitan ng dose-dosenang mga fork.
Ito ay nakasentro sa workflow na <<_git_branching#_topic_branch>> na tinalakay sa <<_git_branching#_git_branching>>.

Narito kung paano ito gumagana:

1. I-fork ang proyekto
2. Lumikha ng isang branch ng paksa mula sa `master`.
3. Gumawa ng ilang commits upang mapabuti ang proyekto.
4. I-push ang branch na ito sa iyong proyekto sa GitHub.
5. Magbukas ng isang Kahilingan na Pull sa GitHub.
6. Talakayin, at opsyonal na patuloy na gumawa.
7. Pagsasamahin o isasara ng may-ari ng proyekto ang Kahilingan na Pull.

Ito ang karaniwan na workflow ng Tagapamahala ng Paglagom na tinalakay sa <<_distributed_git#_integration_manager>>, ngunit sa halip na gagamit ng email sa pakikipag-ugnayan at pagsusuri ng mga pagbabago, ang pangkat ay gumagamit ng mga kagamitan ng GitHub na nakabatay sa web.

Talakayin natin ang isang halimbawa ng pagpapanukala ng pagbabago sa isang open-source na proyekto na naka-host sa GitHub gamit ang daloy na ito.

===== Paglilikha ng isang Kahilingan na Pull

Naghahanap ng code si Tony na tatakbo sa kanyang Arduino programmable microcontroller at nakatagpo ng isang mahusay na file ng programa sa GitHub sa https://github.com/schacon/blink[].

.Ang proyekto na gusto nating tulungan.
image::images/blink-01-start.png[Ang proyekto na gusto nating tulungan.]

Ang tanging problema ay ang masyadong mabilis ang kumukurap na rate, sa tingin namin ito ay mas mahusay na maghintay ng 3 segundo sa halip ng 1 sa pagitan ng bawat pagbabago ng estado.
Kaya ating pabutihin ang programa at isumite ito pabalik sa proyekto bilang isang iminungkahing pagbabago.

Una, ating i-click ang pindutan na 'Fork' tulad ng nabanggit kanina upang makuha ang ating sariling kopya ng proyekto.
Ang pangalan ng gumagamit dito ay ``tonychacon'' kaya ang kopya ng ating proyekto ay nasa `https://github.com/tonychacon/blink` at diyan natin maaaring mabago ito.
Atin itong lokal na i-clone, lumikha ng isang branch ng paksa, gumawa ng pagbabago sa code at sa wakas ay i-push ang pagbabago na iyon pabalik sa GitHub.

[source,console]
----
$ git clone https://github.com/tonychacon/blink <1>
Nagko-clone sa 'blink'...

$ cd blink
$ git checkout -b slow-blink <2>
Lumipat sa isang bagong branch na 'slow-blink'

$ sed -i '' 's/1000/3000/' blink.ino (macOS) <3>
# Kung ikaw ay nasa isang sistema na Linux, gawin ito sa halip:
# $ sed -i 's/1000/3000/' blink.ino <3>

$ git diff --word-diff <4>
diff --git a/blink.ino b/blink.ino
index 15b9911..a6cc5a5 100644
--- a/blink.ino
+++ b/blink.ino
@@ -18,7 +18,7 @@ void setup() {
// ang loop na gawain ay tumatakbo nang paulit-ulit magpakailanman:
void loop() {
  digitalWrite(led, HIGH);   // i-on ang LED (HIGH ay ang antas ng boltahe)
  [-delay(1000);-]{+delay(3000);+}               // maghintay ng isang segundo
  digitalWrite(led, LOW);    // i-off ang LED sa pamamagitan ng paggawa ng boltahe sa LOW
  [-delay(1000);-]{+delay(3000);+}               // maghintay ng isang segundo
}

$ git commit -a -m 'mas mahusay ang tatlong segundo' <5>
[slow-blink 5ca509d] mas mahusay ang tatlong segundo
 1 file ang nabago, 2 pagsisingit(+), 2 pagtatanggal(-)

$ git push origin slow-blink <6>
Username para sa 'https://github.com': tonychacon
Password para sa 'https://tonychacon@github.com':
Pagbibilang ng mga bagay: 5, tapos na.
Delta compression na gumagamit ng hanggang 8 threads.
Nagko-compress ng mga bagay: 100% (3/3), tapos na.
Nagsusulat ng mga bagay: 100% (3/3), 340 bytes | 0 bytes/s, tapos na.
Kabuuan 3 (delta 1), muling nagamit 0 (delta 0)
Sa https://github.com/tonychacon/blink
 * [new branch]      slow-blink -> slow-blink
----

<1> I-clone nang pa-lokal ang ating fork sa proyekto
<2> Lumikha ng isang mapaglarawang branch ng paksa
<3> Gawin ang ating pagbabago sa code
<4> Suriin na ang pagbabago ay mabuti
<5> I-commit ang ating pagbabago sa branch ng paksa
<6> I-push ang ating bagong branch ng paksa pabalik sa ating fork sa GitHub

Ngayon kung tayo ay babalik sa ating fork sa GitHub, makikita natin na napansin ng GitHub na tayo ay nag-push ng isang bagong branch ng paksa at nagtatanghal sa atin ng isang malaking berdeng pindutan upang suriin ang ating mga pagbabago at magbukas ng isang Kahilingan na Pull sa orihinal na proyekto.

Maaari kang pumunta sa pahina ng ``Branches'' sa `https://github.com/<user>/<project>/branches` upang hanapin ang iyong branch at magbukas ng isang bagong Kahilingan na Pull mula doon.

.Pindutan na Kahilingan na Pull
image::images/blink-02-pr.png[Pindutan na Kahilingan na Pull]

(((GitHub, pull requests)))
Kung i-click natin ang berdeng pindutan na iyon, makikita natin ang isang screen na nagtatanong sa atin na magbigay ng titulo at paglalarawan sa ating Kahilingan na Pull.
Ito ay halos palaging kapaki-pakibanang na maglagay ng ilang pagsisikap dito, dahil ang isang mahusay na paglalarawan ay nakakatulong sa may-ari ng orihinal na proyekto na matukoy ang anumang sinubukan mong gawin, kung ang iminungkahing pagbabago ay tama, o kung ang pagtatanggap ng mga pagbabago ay makakabuti sa orihinal na proyekto.

Nakikita rin natin ang isang listahan ng mga gumawa sa ating branch ng paksa na ``ahead'' sa ating branch na `master` (sa kasong ito, isa lamang) at ang isang pinag-isang diff sa lahat ng mga pagbabago na gagawin kung dapat bang ang branch na ito ay isama ng may-ari ng proyekto.

.Pahina ng paglilikha ng Kahilingan na Pull
image::images/blink-03-pull-request-open.png[Pahina ng paglilikha ng Kahilingan na Pull]

Kapag pinindot mo ang pindutan na 'Lumikha ng kahilingan na pull', ang may-ari ng proyekto na iyong na-fork ay makakakuha ng abiso na may nagmumungkahi ng isang pagbabago at magli-link sa isang pahina kung saan naroon ang lahat ng mga impormasyon na ito.

[TANDAAN]
====
Kahit ang mga Kahilingan na Pull ay pangkaraniwan na ginamit para sa mga pampublikong proyekto kagaya nito kung saan ang nag-aambag ay mayroong kumpletong pagbabago na handang gawin, ito rin ay madalas na ginamit sa mga panloob na mga proyekto _sa simula_ ng cycle ng development. Dahil maaari kang patuloy na mag-push sa branch ng paksa kahit 'pagkatapos' na nabuksan ang Kahilingan na Pull, ito'y madalas na nakabukas nang maaga at ginamit bilang isang paraan upang ulitin ang paggawa bilang isang pangkat sa loob ng konteksto, sa halip na buksan sa kaduluhan ng proseso.
====

===== Pag-uulit sa Kahilingan na Pull

Sa puntong ito, ang may-ari ng proyekto ay maaari tumingin sa iminungkahing pagbabago at pagsamahin ito, tanggihan ito o magkomento dito. Sabihin natin na hindi niya gusto ang ideya, ngunit mas gusto ng isang bahagyang mas mahabang oras para sa liwanag na i-off kaysa i-on.

Kung saan ang pag-uusap na ito ay maaaring maganap sa email sa workflow na ipinakita sa << _ distributed_git # _distributed_git >>, sa GitHub nangyayari ito online. Maaaring suriin ng may-ari ng proyekto ang pinag-isang diff at mag-iwan ng komento sa pamamagitan ng pag-click sa alinman sa mga linya.

.Magkomento sa isang partikular na linya ng code sa isang Kahilingan na Pull
image::images/blink-04-pr-comment.png[komento sa linya ng PR]

Kapag ang tagapangasiwa ay gumagawa ng komentong ito, ang taong nagbukas ng Kahilingan na Pull (at sa katunayan, ang sinumang iba pa na nanonood sa repositoryo) ay makakakuha ng isang abiso. Susubukan nating baguhin ang pagpapasadya na ito sa ibang pagkakataon, ngunit kung mayroon siyang mga abiso sa email na naka-on, makakakuha si Tony ng isang email na katulad nito:

[[_email_notification]]
.Mga komento naipadala bilang mga abiso sa email
image::images/blink-04-email.png[Email notification]

Sinuman ay maaari ring mag-iwan ng mga pangkalahatang komento sa Kahilingan na Pull. Sa <<_pr_discussion>>, maaari nating makita na ang may-ari ng proyekto ay kapwa nagkokomento sa isang linya ng code at pagkatapos ay nag-iiwan ng pangkalahatang komento sa seksyon ng talakayan. Maaari mong makita na ang mga komento ng code ay dinala na rin sa pag-uusap.

[[_pr_discussion]]
.Pahina ng Talakayan ng Kahilingan na Pull
image::images/blink-05-general-comment.png[pahina ng talakayan ng PR]

Ngayon ang nag-aambag ay maaaring makakita kung ano ang kanilang kailangang gawin upang makakuha ng mga natanggap na pagbabago.
Sa kabutihang-palad ito ay napakatuwiran.
Kung saan sa email, maaaring kailangan mong muling igulong ang iyong mga serye at muling isumite ito sa listahan ng mga mail, sa GitHub i-commit mo lamang ulit sa branch ng paksa at i-push, kung saan ay awtomatikong na-update sa Kahilingan na Pull.
Sa <<_pr_final>> maaari mo ring makita ang komento sa lumang code ay nabagsak sa nabagong Kahiligan na Pull, dahil ito ay nagawa sa isang linya na nabago na.

Pagdaragdag ng mga commit sa umiiral na Kahilingan na Pull ay hindi nag-trigger ng abiso, kaya sa sandaling mag-push si Tony ng mga pagtatama, nagdedesisyon siya na mag-iwan ng komento upang ipaalam sa may-ari ng proyekto na siya ay gumawa ng hiniling na pagbabago.

[[_pr_final]]
.Panghuling Kahilingan na Pull
image::images/blink-06-final.png[PR final]

Isang nakawiwiling bagay na mapapansin ay kung nag-click ka sa tab ng ``Nabagong mga File'' sa Kahilingan na Pull na ito, makakakuha ka ng ``unified'' diff -- iyon ang kabuuang pinagsama-samang pagkakaiba na ipapakilala sa iyong pangunahing branch kapag ang paksang ito ay pinagsama. Sa mga termino ng `git diff`, ito talaga ay awtomatikong nagpapakita sa iyo ng `git diff master...` para sa branch kung saan nakabatay ang Kahilingan na Pull na ito. Tingnan sa <<_distributed_git#_what_is_introduced>> para sa karagdagang uri ng diff na ito.

Ang ibang bagay na iyong mapapansin ay ang pagsusuri ng GitHub kung ang Kahilingan na Pull ay nasama nang malinis at nagbibigay ng isang pindutan na gagawa ng pagsama para sa iyo sa server. Ang pindutan na ito ay nakikita lamang kung ikaw ay may access sa pagsulat sa repositoryo at ang isang walang halaga na pagsasama ay posible. Kung i-click mo ito, magsasagawa ang GitHub ng isang pagsasama na ``non-fast-forward'', ibig sabihin na kahit ang pagsasama ay *maaari* na isang fast-forward, ito ay lilikha pa rin ng isang commit na pagsamahin.

Kung naisin mo, maari mo lamamg i-pull ang branch at lokal na isama ito. Kapag isama mo ang branch na ito sa branch na `master` branch at i-push ito sa GitHub, awtomatikong masasara ang Kahilingan na Pull.

Ito ang pinagbabatayang workflow na ginagamit ng karamihan sa mga proyekto ng GitHub. Ang mga branch ng paksa ay nalikha, mga Kahilingan na Pull ay nabuksan sa kanila, isang talakayin ang naganap, posibleng mas maraming trabaho ang ginagawa sa branch at sa huli ang kahilingan ay sarado o pinagsama.

[TANDAAN]
.Hindi Lamang Forks
====
Mahalaga na tandaan na maaari ka ring magbukas ng isang Kahilingan na Pull sa pagitan ng dalawang branch sa parehong repositoryo. Kung ikaw ay nagtatrabaho sa isang tampok at pareho kayong may access sa pagsulat sa proyekto, maaari kang mag-push ng branch ng paksa repositoryo at magbukas ng isang Kahilingan na Pull dito sa branch na `master` sa parehong proyekto na iyon upang masimulan ang pagsusuri sa review at proseso ng talakayin. Walang kinakailangang pag-fork.
====

==== Mga Advanced na Kahilingan na Pull

Ngayon na ating natalakay ang mga pangunahing kaalaman sa pag-aambag sa isang proyekto sa GitHub, talakayin natin ang ilang mga kagiliw-giliw na tip at kaalaman tungkol sa mga Kahilingan na Pull upang ikaw ay mas magiging epektibo sa paggamit nito.

===== Mga Kahilangan na Pull bilang mga Patch

Mahalagang maintindihan na maraming mga proyekto ang hindi talaga nag-iisip ng Kahilangan na Pull bilang mga queue ng perpektong mga patch na dapat ilapat nang malinis sa pagkakasunud-sunod, tulad ng karamihan sa mga proyekto nakabatay sa listahan ng mail na iniisip ang mga kontribusyon ng serye ng patch. Iniisip ng karamihan sa mga proyekto ng GitHub ang mga branch ng Kahilingan na Pull bilang umuulit na pag-uusap sa paligid ng isang ipinanukalang pagbabago, nagtatapos sa isang pinag-isang diff na inilalapat sa pamamagitan ng pagsasama.

Ito ay isang mahalagang pagkakaiba, dahil sa pangkalahatan, ang pagbabago ay iminungkahi bago ang code ay naisip na maging perpekto, na kung saan ay malayong mas bihira sa mga listahan ng mail na nakabatay sa patch serye ng mga kontribusyon. Ito ay nagbibigay-daan sa isang mas maagang pag-uusap sa mga tagapagpanatili upang ang pagdating sa tamang solusyon ay higit pa sa pagsisikap ng komunidad. Kung ang code ay iminungkahi sa isang Kahilingan na Pull at mga tagapagpanatili o komunidad ay nagmumungkahi ng pagbabago, ang mga serye ng patch ay pangkalahatang hindi nagulong muli, ngunit sa halip ang pagkakaiba ay na-psu bilang isang bagong commit sa branch, na inililipat ang pag-uusap nang pasulong sa konteksto ng nakaraang trabaho na buo.

Halimbawa, kung babalikan mo at tingnang muli sa <<_pr_final>>, mapapansin mo na ang nag-aambagag ay hindi nag-rebase sa kanyang commit at nagpadala ng ibang Kahilingan na Pull. Sa halip ay nagdagdag sila ng mga bagong commit at nag-push sila sa umiiiral na branch. Sa paraang ito kung ikaw ay babalik at titingin sa Kahilingan na Pull na ito sa hinaharap, madali mong mahanap ang lahat ng konteksto kung bakit ang mga desisyon ay nagawa. Pasadyang pagpindot sa ``Merge'' na pindutan sa site ay naglilikha ng isang commit na pagsasama na nagsasangguni sa Kahilingan na Pull upang madaling bumalik at magsaliksik sa orihinal na pag-uusap kung kinakailangan.

===== Pagpapanatili sa Upstream

Kung ang Kahilingan na Pull ay nagiging luma o hindi malinas na naisama, gugustuhin mong ayusin ito upaang ang tagapanatili ay madali makapagsama dito. Susuriin ito ng GitHub para sa iyo at ipapaalam sa iyo sa ibaba ng bawat Kahilingan na Pull kung ang pagsasama ay walang halaga o hindi.

[[_pr_fail]]
.Hindi malinis na nasama ang Kahilingan na Pull
image::images/pr-01-fail.png[PR merge failure]

Kung nakakita ka ng isang bagay tulad ng <<_pr_fail>>, gugustuhin mong ayusin ang iyong branch upang ito ay nagiging berde at ang tagapagpanatili ay hindi kailangang gumawa ng dagdag na trabaho.

Mayroon kang dalawang pangunahing mga opsyon upang magawa ito. Maaari mong i-rebase ang iyong branch sa itaas ng anumang ang branch na target (karaniwan ang branch na `master` repositoryo na iyong na-fork), o maaari mong isama ang branch na target sa iyong branch.

Pipiliin ng karamihan sa mga developer sa GitHub na gawin ang paghuli, para sa parehong dahilan na ating tinalakay sa nakaraang seksyon. Ang mahalaga ay ang kasaysayan at ang panghuling merge, kaya ang pag-rebase ay hindi nagkukuha sa iyo ng marami maliban sa isang bahagyang mas malinis na kasaysayan at sa pagbabalik ay *malayo* na mas mahirap at madaling kapitan ng error.

Kung gusto mong mag-merge sa branch ng target upang magawa mong maaari i-merge ang iyong Kahilingan na Pull,idadagdag mo ang orihinal na repositoryo bilang isang bagong remote, mag-fetch mula dito, mag-merge ng pangunahing branch ng repositoryo na iyon sa iyong branch ng paksa, mag-ayos ng anumang mga isyo at panghuli ay i-push ito sa parehong branch kung saan mo binuksan ang Kahilingan na Pull.

Halimbawa, sabihin natin na sa halimbawa na ``tonychacon'' na ginamit natin dati, ang orihinal na may-akda ay gumawa ng pagbabago na maaari maglikha ng salungatan sa Kahilingan na Pull. Puntahan natin ang mga hakbang na iyon.

[source,console]
----
$ git remote add upstream https://github.com/schacon/blink <1>

$ git fetch upstream <2>
remote: Nagbibilang ng mga bagay: 3, tapos na.
remote: Nagko-compress ng mga bagay: 100% (3/3), tapos na.
Nag-a-unpack ng mga bagay: 100% (3/3), tapos na.
remote: Kabuuan 3 (delta 0), muling nagamit 0 (delta 0)
Mula sa https://github.com/schacon/blink
* [new branch] master -> upstream/master

$ git merge upstream/master <3>
Auto-merging blink.ino
SALUNGANTAN (nilalaman): Salungatan sa merge sa blink.ino
Nabigo ang awtomating merge; ayusin ang mga salungatan at pagkatapos i-commit ang resulta.

$ vim blink.ino <4>
$ git add blink.ino
$ git commit
[slow-blink 3c8d735] Merge remote-tracking branch 'upstream/master' \
sa slower-blink

$ git push origin slow-blink <5>
Nagbibilang ng mga bagay: 6, tapos na.
Delta compression gumagamit hanggang 8 threads.
Nagko-compress ng mga bagay: 100% (6/6), tapos na.
Nagsusulat ng mga bagay: 100% (6/6), 682 bytes | 0 bytes/s, tapos na.
Kabuuan 6 (delta 2), muling nagamit 0 (delta 0)
Sa https://github.com/tonychacon/blink
ef4725c..3c8d735 slower-blink -> slow-blink
----

<1> Idagdag ang orihinal na repositoryo bilang isang remote na pinangalanang ``upstream''
<2> Kunin ang pinakabagong trabaho mula sa remote na iyon
<3> I-merge ang pangunahing branch sa repositoryo na iyon sa iyong branch ng paksa
<4> Ayusin ang nangyaring salungatan
<5> I-push pabalik sa parehong branch ng paksa

Kapag ginawa mo iyon, ang Kahilingan na Pull ay awtomatikong mai-update at muling susuriin upang makita kung na-merge ito nang malinis.

[[_pr_merge_fix]]
.Na-merge nang malinis na ngayon ang Kahilingan na Pull
image::images/pr-02-merge-fix.png[PR fixed]

Isa sa mga magagandang bagay tungkol sa Git ay maaari mong patuloy na gawin iyon. Kung mayroon kang isang napakatagal na proyekto, madali mong ma-merge mula sa branch ng target nang paulit-ulit at kailangan lamang makitungo sa mga salungatan na nangyari mula noong huli na ikaw ay nag-merge, ginagawa ang proseso na napapamahalaan.

Kung talagang gusto mong i-rebase ang branch upang malinis ito, maaari mong tiyak na gawin ito, ngunit ito ay lubos na hinihikayat na huwag piliting mag-push sa branch na ang Kahilingan na Pull ay binuksan na. Kung ang ibang tao ay naka-pull na dito at nakagawa ng mas maraming trabaho, mararanasan mo ang lahat ng isyo na nakabalangkas sa <<_git_branching#_rebase_peril>>. Sa halip, i-push ang branch na naka-rebase sa isang bagong branch sa GitHub at magbukas ng isang bagong Kahilingan na Pull na tumutukoy sa luma, pagkatapos ay isara ang orihinal.

===== References

Your next question may be ``How do I reference the old Pull Request?''. It turns out there are many, many ways to reference other things almost anywhere you can write in GitHub.

Let's start with how to cross-reference another Pull Request or an Issue. All Pull Requests and Issues are assigned numbers and they are unique within the project. For example, you can't have Pull Request #3 _and_ Issue #3. If you want to reference any Pull Request or Issue from any other one, you can simply put `#<num>` in any comment or description. You can also be more specific if the Issue or Pull request lives somewhere else; write `username#<num>` if you're referring to an Issue or Pull Request in a fork of the repository you're in, or `username/repo#<num>` to reference something in another repository.

Let's look at an example. Say we rebased the branch in the previous example, created a new pull request for it, and now we want to reference the old pull request from the new one. We also want to reference an issue in the fork of the repository and an issue in a completely different project. We can fill out the description just like <<_pr_references>>.

[[_pr_references]]
.Cross references in a Pull Request.
image::images/mentions-01-syntax.png[PR references]

When we submit this pull request, we'll see all of that rendered like <<_pr_references_render>>.

[[_pr_references_render]]
.Cross references rendered in a Pull Request.
image::images/mentions-02-render.png[PR references rendered]

Notice that the full GitHub URL we put in there was shortened to just the information needed.

Now if Tony goes back and closes out the original Pull Request, we can see that by mentioning it in the new one, GitHub has automatically created a trackback event in the Pull Request timeline. This means that anyone who visits this Pull Request and sees that it is closed can easily link back to the one that superseded it. The link will look something like <<_pr_closed>>.

[[_pr_closed]]
.Link back to the new Pull Request in the closed Pull Request timeline.
image::images/mentions-03-closed.png[PR closed]

In addition to issue numbers, you can also reference a specific commit by SHA-1. You have to specify a full 40 character SHA-1, but if GitHub sees that in a comment, it will link directly to the commit. Again, you can reference commits in forks or other repositories in the same way you did with issues.

==== GitHub Flavored Markdown

Linking to other Issues is just the beginning of interesting things you can do with almost any text box on GitHub. In  Issue and Pull Request descriptions, comments, code comments and more, you can use what is called ``GitHub Flavored Markdown''. Markdown is like writing in plain text but which is rendered richly.

See <<_example_markdown>> for an example of how comments or text can be written and then rendered using Markdown.

[[_example_markdown]]
.An example of GitHub Flavored Markdown as written and as rendered.
image::images/markdown-01-example.png[Example Markdown]

The GitHub flavor of Markdown adds more things you can do beyond the basic Markdown syntax. These can all be really useful when creating useful Pull Request or Issue comments or descriptions.

===== Task Lists

The first really useful GitHub specific Markdown feature, especially for use in Pull Requests, is the Task List. A task list is a list of checkboxes of things you want to get done. Putting them into an Issue or Pull Request normally indicates things that you want to get done before you consider the item complete.

You can create a task list like this:

[source,text]
----
- [X] Write the code
- [ ] Write all the tests
- [ ] Document the code
----

If we include this in the description of our Pull Request or Issue, we'll see it rendered like <<_eg_task_lists>>

[[_eg_task_lists]]
.Task lists rendered in a Markdown comment.
image::images/markdown-02-tasks.png[Example Task List]

This is often used in Pull Requests to indicate what all you would like to get done on the branch before the Pull Request will be ready to merge. The really cool part is that you can simply click the checkboxes to update the comment -- you don't have to edit the Markdown directly to check tasks off.

What's more, GitHub will look for task lists in your Issues and Pull Requests and show them as metadata on the pages that list them out. For example, if you have a Pull Request with tasks and you look at the overview page of all Pull Requests, you can see how far done it is. This helps people break down Pull Requests into subtasks and helps other people track the progress of the branch. You can see an example of this in <<_task_list_progress>>.

[[_task_list_progress]]
.Task list summary in the Pull Request list.
image::images/markdown-03-task-summary.png[Example Task List]

These are incredibly useful when you open a Pull Request early and use it to track your progress through the implementation of the feature.

===== Code Snippets

You can also add code snippets to comments. This is especially useful if you want to present something that you _could_ try to do before actually implementing it as a commit on your branch. This is also often used to add example code of what is not working or what this Pull Request could implement.

To add a snippet of code you have to ``fence'' it in backticks.

[source,text]
----
```java
for(int i=0 ; i < 5 ; i++)
{
   System.out.println("i is : " + i);
}
```
----

If you add a language name like we did there with 'java', GitHub will also try to syntax highlight the snippet. In the case of the above example, it would end up rendering like <<_md_code>>.

[[_md_code]]
.Rendered fenced code example.
image::images/markdown-04-fenced-code.png[Rendered fenced code]

===== Quoting

If you're responding to a small part of a long comment, you can selectively quote out of the other comment by preceding the lines with the `>` character. In fact, this is so common and so useful that there is a keyboard shortcut for it. If you highlight text in a comment that you want to directly reply to and hit the `r` key, it will quote that text in the comment box for you.

The quotes look something like this:

[source,text]
----
> Whether 'tis Nobler in the mind to suffer
> The Slings and Arrows of outrageous Fortune,

How big are these slings and in particular, these arrows?
----

Once rendered, the comment will look like <<_md_quote>>.

[[_md_quote]]
.Rendered quoting example.
image::images/markdown-05-quote.png[Rendered quoting]

===== Emoji

Finally, you can also use emoji in your comments. This is actually used quite extensively in comments you see on many GitHub Issues and Pull Requests. There is even an emoji helper in GitHub. If you are typing a comment and you start with a `:` character, an autocompleter will help you find what you're looking for.

[[_md_emoji_auto]]
.Emoji autocompleter in action.
image::images/markdown-06-emoji-complete.png[Emoji autocompleter]

Emojis take the form of `:<name>:` anywhere in the comment. For instance, you could write something like this:

[source,text]
----
I :eyes: that :bug: and I :cold_sweat:.

:trophy: for :microscope: it.

:+1: and :sparkles: on this :ship:, it's :fire::poop:!

:clap::tada::panda_face:
----

When rendered, it would look something like <<_md_emoji>>.

[[_md_emoji]]
.Heavy emoji commenting.
image::images/markdown-07-emoji.png[Emoji]

Not that this is incredibly useful, but it does add an element of fun and emotion to a medium that is otherwise hard to convey emotion in.


[NOTE]
====
There are actually quite a number of web services that make use of emoji characters these days. A great cheat sheet to reference to find emoji that expresses what you want to say can be found at:

http://www.emoji-cheat-sheet.com
====

===== Images

This isn't technically GitHub Flavored Markdown, but it is incredibly useful. In addition to adding Markdown image links to comments, which can be difficult to find and embed URLs for, GitHub allows you to drag and drop images into text areas to embed them.

[[_md_drag]]
.Drag and drop images to upload them and auto-embed them.
image::images/markdown-08-drag-drop.png[Drag and drop images]

If you look at <<_md_drag>>, you can see a small ``Parsed as Markdown'' hint above the text area. Clicking on that will give you a full cheat sheet of everything you can do with Markdown on GitHub.
