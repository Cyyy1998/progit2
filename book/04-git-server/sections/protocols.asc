=== Ang Mga Protokol

Maaaring gamitin ng Git ang apat na magkakaibang mga protokol upang lumipat ng mga data: Lokal, HTTP, Secure Shell (SSH) at Git.
Dito tatalakayin natin kung ano sila at kung saang mga pangunahing pangyayari gusto mo (o di gusto) sila gamitin.

==== Lokal na Protokol

(((protocol, local)))
Ang pinaka-pangunahin ay ang _Lokal na protokol_, na kung saan ang remote na repositoryo ay nasa ibang direktoryo sa parehong host.
Madalas itong ginagamit kapag lahat kayo sa inyong koponan ay may access sa isang ibinahagi na filesystem tulad ng isang NFS mount, o sa malabong kaso na lahat ay nag-log sa parehong kompyuter.
Ang huli ay hindi tamang-tama, kasi lahat ng instansya ng repositoryo ng iyong code ay naninirahan sa parehong kompyuter, mas malaki ang posibilidad ng pagkawala ng sakuna.

Kapag ikaw ay may isang ibinahagi na naka-mount na filesystem, maaari kang mag clone, mag-push sa, at mag pull mula sa isang lokal na nakabatay sa file na repositoryo.
Para i-clone ang isang repositoryo na tulad nito, o idagdag bilang isang remote sa umiiral na proyekto, gamitin ang landas patungo sa repositoryo bilang URL.
Halimbawa, upang i-clone ang isang lokal na repositoryo, maaari kang magpagana ng ganito:

[source,console]
----
$ git clone /srv/git/project.git
----

O maaari mong gawin ito:

[source,console]
----
$ git clone file:///srv/git/project.git
----

Ang Git ay gumagana ng bahagyang maiba kapag tahasang tinukoy mo ang `file://` sa simula ng URL.
Kapag ang landas lamang ang tinukoy mo, Sinusubukan ng Git na gumamit ng mga hardlink o direktang kinokopya ang mga file na kailangan nito.
Kapag tinukoy mo ang `file://`, pinapagana ng Git ang mga proseso na karanawing ginagamit upang lumipat ng data sa isang network, na kung saan ay karaniwang mas mahina.
Ang pinakarason upang tukuyin ang `file://` na prefix ay kung gusto mo ng isang malinis na kopya ng repositoryo na may mga reperensiya o mga object na naiwan -- Sa pangkalahatan ay pagkatapos ng pag-import mula sa ibang VCS o sa isang bagay na katulad (tingnan <<_git_internals#_git_internals>> para sa mga gawain ng pagpapanatili).
Gagamitin natin ang normal na landas dito dahil ang paggawa nito ay halos parati na mas mabilis.

Upang magdagdag ng isang lokal na repositoryo sa umiiral na proyekto sa Git, maaari kang magpagana ng ganito:

[source,console]
----
$ git remote add local_proj /srv/git/project.git
----

Pagkatapos, maaaring i-push papunta o i-pull mula sa remote na iyon sa pamamagitan ng paggamit ng iyong bagong remote na pangalan `local_proj` parang ginagawa mo sa isang network.

===== Ang mga Kalamangan

Ang mga kalamangan ng isang repositoryo na nakabatay sa file ay ang mga ito ay simple at ginagamit ang mga umiiral na mga pahintulot ng file at access sa network.
Kapag ibinahagi mo na ang isang filesystem na kung saan may-access ang lahat ng iyong team, ang pag-set up ng isang repositoryo ay napakadali.
Ilalagay mo ang kopya ng hubad na repositoryo sa kung saan may access ang lahat at i-set ang pagbasa/pagsulat na mga pahintulot katulad ng kahit anong ibinahagi na direktoryo.
Tatalakayin natin kung papaano mag-export ng isang kopya ng hubad na repositoryo para sa itong layunin sa <<_git_on_the_server#_getting_git_on_a_server>>.

Ito rin ay isang magandang opsyon para sa mabilis na pagkuha ng trabaho mula sa gumagana na repositoryo ng iba.
Kapag ikaw at ang isang co-worker ay nagtatrabaho sa isang proyekto at gusto nila na may kunin ka, ang pagpapagana ng isang utos tulad ng `git pull /home/john/project` ay kadalasan mas madali kesa mag-push sila sa isang remote na server at pagkatapos ay kukunin mo.


===== Ang mga Kahinaan

Ang mga kahinaan ng paraan na ito ay ang mga ibinahagi na access ay sa pangkalahatan mas mahirap i-set up at maabot mula sa maramihang mga lokasyon kaysa sa pangunahing network access.
Kapag gusto mong mag-push mula sa iyong laptop kapag ikaw ay nasa bahay, kailangan mong i-mount ang remote dist, na maaaring maging mahirap at mahina kumpara sa batay sa network na access.

Mahalagang banggitin na hindi ito ang pinakamabilis na opsyon kung ikaw ay gumagamit ng isang uri ng ibinahagi na mount.
Ang isang lokal na repositoryo ay mabilis lamang kapag ikaw ay may mabilis na access sa data.
Ang repositoryo na nasa NFS ay madalas mas mahina kumpara sa repositoryo na nasa SSH sa parehong server, nagpapahintulot na ipagana ang Git gamit ang lokal na mga disk sa bawat sistema.

Sa wakas, hindi pinoprotektahan ng protokol na ito ang repositoryo mula sa mga hindi sinasadya na mga aksidente.
Ang bawat gumagamit ay may buong access ng shell sa ``remote'' na direktoryo, at walang pumipigil sa kanila sa pagbago o pagtanggal ng mga Git files sa loob at pag-corrupt sa repositoryo.

==== Ang mga Protokol ng HTTP

Ang Git ay maaaring makipag-usap sa HTTP gamit ang dalawang magkaibang mga mode.
Bago ang Git 1.6.6, Mayroon lamang isang paraan upang maisagawa ito na kung saan ay madali at sa pangkalahatan ay read-only.
Sa bersyon 1.6.6, isang bago, mas matalinong protokol ang ipinakilala na kasangkot ang Git na magagawang mas matalino na pag-usap ng paglipat ng data sa parehong paraan ng SSH. 
Sa mga nakaraang mga taon, itong bago na protokol ng HTTP ay naging popular dahil ito ay mas madali para sa gumagamit at mas matalino kung papaano nakikipag-usap.
Ang mas bagong bersyon ay kadalasan mas tinutukoy bilang ang _Smart_ HTTP na protokol at ang lumang paraan ay ang _Dumb_ HTTP.
Una natin tatalakayin ang mas bago na Smart HTTP protokol.

===== Smart HTTP

(((protocol, smart HTTP)))
Ang Smart HTTP ay gumagana katulad ng mga protokol ng SSH o Git pero gumagana sa mga standard na port ng HTTPS at makakagamit ng iba't ibang mekanismo ng pagpapatunay ng HTTP, ibig sabihin madalas na mas madali para sa gumagamit kaysa sa katulad ng SSH, dahil ikaw ang makakagamit ng mga bagay katulad ng pagpapatunay ng username/password kumpara sa pag-set up ng mga key ng SSH.

Marahil ay ito ng ang pinaka-popular na pamamaraan sa paggamit sa Git, dahil ito ay maaaring i-set up upang parehong maghatid ng hindi nagpapakilala katulad ng protokol ng `git://`, at maaaring i-push kasama ang pagpapatunay at encryption katulad ng protokol ng SSH.
Sa halip ng pagkakaroon ng pag-set up ng iba't ibang mga URL para sa mga ganitong bagay, maaaring gamitin ang isang URL para sa dalawa.
Kapag susubukan mong mag-push at nangangailangan ng pag-awtentik ang repositoryo (na kung saan ito ay normal), Ang server ay maaaring mag prompt para sa isang username at password.
Ito ay pareho para sa access sa pagbasa.

Sa katunayan, para sa mga serbisyo katulad ng GitHub,Ang URL na ginagamit mo upang tingnan ang repositoryo online (halimbawa, https://github.com/schacon/simplegit[]) ay parehong URL na maaari mong gamitin upang mag-clone at, kung ikaw ay may-access, mag-push.

===== Dumb HTTP

(((protocol, dumb HTTP)))
Kapag ang server ay hindi tumugon ng isang matalinong serbisyo ng Git HTTP, Susubukan ng kliyente ng Git na bumalik sa mas madaling _Dumb_ HTTP na protokol.
Inaasahan ng Dumb na protokol ang hubad na repositoryo ng Git ang ihahatid tulad ng mga normal na mga file mula sa web server.
Ang kagandahan ng Dumb HTTP ay ang madaling pag set-up nito.
Sa totoo lang, ang kailangan mo lang gawin ay maglagay ng hubad na repositoryo ng Git sa ilalim ng isang HTTP na dokumento sa root at mag-set up ng isang tiyak na `post-update` hook, at tapos ka na (Tingnan <<_customizing_git#_git_hooks>>).
Sa puntong iyon, sinuman na makaka-access sa web server sa ilalim na kung saan maaaring ilagay ang repositoryo ay maaaring i-clone ang iyong repositoryo.
Upang payagan ang access sa pagbasa sa iyong repositoryo sa HTTP, gumawa ng katulad nito: 

[source,console]
----
$ cd /var/www/htdocs/
$ git clone --bare /path/to/git_project gitproject.git
$ cd gitproject.git
$ mv hooks/post-update.sample hooks/post-update
$ chmod a+x hooks/post-update
----

Yun Lang.(((mga hook, post-update)))
Ang `post-update` na hook na kasama ng Git bilang default ay ipinapagana ang tamang utos (`git update-server-info`) upang mapagana ng maayos ang HTTP fetching ang pag-kopya.
Ang utos na ito ay pinapagana kapag nag-push ka sa repositoryo na ito (marahil sa SSH); pagktapos, maaaring mag-clone ang ibang tao gamit ang katulad

[source,console]
----
$ git clone https://example.com/gitproject.git
----

Sa partikular na kaso na ito, ginagamit natin ang `/var/www/htdocs` na landas na karaniwan sa mga Apache na setup, pero makikita mo na maaaring gumamit ng anumang statik na web server -- ilagay lamang ang hubad na repositoryo sa kanyang landas.
Ang data ng Git ay hinahatid bilang isang statik na mga file (tingnan ang <<_git_internals#_git_internals>> na kabanata para sa mga detalye kung papaano ito eksaktong hinahatid).

Sa pangkalahatan pipili ka kung magpapagana ng pabasa/pagsulat na Smart HTTP server o ilagay na ma-access ang mga file bilang read-only sa Dumb na paraan.
Bihirang magpagana ng halo ng dalawang serbisyo. 

===== The Pros

We'll concentrate on the pros of the Smart version of the HTTP protocol.

The simplicity of having a single URL for all types of access and having the server prompt only when authentication is needed makes things very easy for the end user.
Being able to authenticate with a username and password is also a big advantage over SSH, since users don't have to generate SSH keys locally and upload their public key to the server before being able to interact with it.
For less sophisticated users, or users on systems where SSH is less common, this is a major advantage in usability.
It is also a very fast and efficient protocol, similar to the SSH one.

You can also serve your repositories read-only over HTTPS, which means you can encrypt the content transfer; or you can go so far as to make the clients use specific signed SSL certificates.

Another nice thing is that HTTPS are such commonly used protocols that corporate firewalls are often set up to allow traffic through these ports.

===== The Cons

Git over HTTPS can be a little more tricky to set up compared to SSH on some servers.
Other than that, there is very little advantage that other protocols have over Smart HTTP for serving Git content.

If you're using HTTP for authenticated pushing, providing your credentials is sometimes more complicated than using keys over SSH.
There are, however, several credential caching tools you can use, including Keychain access on macOS and Credential Manager on Windows, to make this pretty painless.
Read <<_git_tools#_credential_caching>> to see how to set up secure HTTP password caching on your system.

==== The SSH Protocol

(((protocols, SSH)))
A common transport protocol for Git when self-hosting is over SSH.
This is because SSH access to servers is already set up in most places -- and if it isn't, it's easy to do.
SSH is also an authenticated network protocol and, because it's ubiquitous, it's generally easy to set up and use.

To clone a Git repository over SSH, you can specify an `ssh://` URL like this:

[source,console]
----
$ git clone ssh://[user@]server/project.git
----

Or you can use the shorter scp-like syntax for the SSH protocol:

[source,console]
----
$ git clone [user@]server:project.git
----

In both cases above, if you don't specify the optional username, Git assumes the user you're currently logged in as.

===== The Pros

The pros of using SSH are many.
First, SSH is relatively easy to set up -- SSH daemons are commonplace, many network admins have experience with them, and many OS distributions are set up with them or have tools to manage them.
Next, access over SSH is secure -- all data transfer is encrypted and authenticated.
Last, like the HTTPS, Git and Local protocols, SSH is efficient, making the data as compact as possible before transferring it.

===== The Cons

The negative aspect of SSH is that it doesn't support anonymous access to your Git repository.
If you're using SSH, people _must_ have SSH access to your machine, even in a read-only capacity, which doesn't make SSH conducive to open source projects for which people might simply want to clone your repository to examine it.
If you're using it only within your corporate network, SSH may be the only protocol you need to deal with.
If you want to allow anonymous read-only access to your projects and also want to use SSH, you’ll have to set up SSH for you to push over but something else for others to fetch from.

==== The Git Protocol

(((protocols, git)))
Next is the Git protocol.
This is a special daemon that comes packaged with Git; it listens on a dedicated port (9418) that provides a service similar to the SSH protocol, but with absolutely no authentication.
In order for a repository to be served over the Git protocol, you must create a `git-daemon-export-ok` file -- the daemon won't serve a repository without that file in it -- but other than that there is no security.
Either the Git repository is available for everyone to clone, or it isn't.
This means that there is generally no pushing over this protocol.
You can enable push access but, given the lack of authentication, anyone on the internet who finds your project's URL could push to that project.
Suffice it to say that this is rare.

===== The Pros

The Git protocol is often the fastest network transfer protocol available.
If you’re serving a lot of traffic for a public project or serving a very large project that doesn't require user authentication for read access, it’s likely that you'll want to set up a Git daemon to serve your project.
It uses the same data-transfer mechanism as the SSH protocol but without the encryption and authentication overhead.

===== The Cons

The downside of the Git protocol is the lack of authentication.
It's generally undesirable for the Git protocol to be the only access to your project.
Generally, you'll pair it with SSH or HTTPS access for the few developers who have push (write) access and have everyone else use `git://` for read-only access.
It's also probably the most difficult protocol to set up.
It must run its own daemon, which requires `xinetd` configuration or the like, which isn't always a walk in the park.
It also requires firewall access to port 9418, which isn't a standard port that corporate firewalls always allow.
Behind big corporate firewalls, this obscure port is commonly blocked.
