[[_remote_repos]]
=== Paggawa gamit ang mga Remote

Upang magawa ang pakikipagtutulungan ng anumang proyekto ng Git, Kailangan mong malaman kung papaano mamamahala ng iyong mga remote na  repositoryo.
Mga remote na repositoryo ay mga bersyon ng iyong proyekto na naka-host that are hosted sa Internet o network sa isang lugar.
Maaari kang magkaroon ilan sa kanila, bawat isa sa pangkalahatan ay alinman basa-lamang o basa/sulat para sayo.
Pakikipagtulungan sa iba ay nagsasangkot sa pamamahala sa remote na mga repositoryo na ito at patulak at paghila ng datos sa patutunguhan at sa pinanggalingan nila kapag kailangan mo upang magbahagi ng trabaho.
Pamamahala ng remote na mga repositoryo kabilang dito ang pag-alam kung papaano magdagdag ng remote na mga repositoryo, alisin ang mga remote na hindi na hindi na balido, pamamahala ng iba't ibang mga sanga at tukuyin ang mga ito bilang sinusubaybayan o hindi, at higit pa.
Sa seksyon na ito, sisidlan natin ang ilan sa mga remote-pamamahala na mga kasanayan na ito.

[TANDAAN]
.Remote na mga repositoryo ay maaaring sa iyong lokal na makina.
====
Ito ay lahat posible na maaari kang nagtratrabaho sa isang ``remote'' na repositoryo na iyan, sa katunayan, sa parehong host ikaw ay.
Ang salitang ``remote'' ay hindi kinakailangan nagpapahiwatig na ang repositoryo ay nasa iba pang lugar sa network o Internet, tanging ito ay sa ibang lugar.
Panggawa gamit ang tulad ng isang remote na repositoryo ay magkakaroon pa rin ng kasangkot sa lahat ng karaniwang patulak, paghila at  pagkuha fetching ng mga operasyon tulad ng sa anumang ibang remote.
====

==== Pagpapakita ng iyong mga Remote

Upang makita kung aling remote na mga server na iyong na-configure, maaari mong patakbuhin ang `git remote` na utos.(((git commands, remote)))
Inililista nito ang mga shortname sa bawat remote na hinawakan na iyong itinukoy.
Kung na-clone mo na sa iyong repositoryo, dapat kang hindi bababa sa tingnan `origin` -- iyon ang default name Git ay nagbibigay sa server na naka-clone ka:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Maaari mo ring tukuyin ang `-v`, na nagpapakita sa iyo ng mga URL na ang Git ay naka-imbak para sa shortname upang magamit kapag nagbabasa at pagsusulat sa remote na iyon:

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Kung mayroon kang higit pa sa isang remote, ang utos ay naglilista sa kanilang lahat.
Halimbawa, ang isang repositoryo na may maramihang mga remore para sa pagtratrabaho na may ilang mga katulong ay maaaring tumingin ng isang bagay na tulad nito.

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Ang ibig sabihin nito ay maaari naming hilain ang mga kontribusyon mula sa alinmang mga gumagamit na medyo madali.
Maaari naming dagdagan na may permiso na mag tulak sa isa o marami sa mga ito, bagaman hindi namin masasabi dito.

Pansinin na ang mga itong mga remote ay gumagamit ng uri ng mga protocol; masasakop namin ang higit pa tungkol dito sa  <<_git_on_the_server#_getting_git_on_a_server>>.

==== Pagdaragdag ng Remote na mga Repositoryo

Nabanggit at ibinigay na namin ang ilang mga demonstrasyon kung papaano ang `git clone` na utos na nagpapahiwatig sa pagdagdag ng `origin` ng remote para sa iyo.
Narito kung papaano magdagdag ng isang bagong remote na malinaw.(((git commands, remote)))
Upang magdagdag ng bagong remote Git repositoryo bilang isang shortname maaari mong reperensiya na madali, patakbuhin ang `git remote add <shortname> <url>`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Ngayon maaari mong gamitin ang string `pb` sa command line sa halip ng buong URL.
Halimbawa, kung gusto mong kunin ang lahat na impormasyon na mayroon si Pablo ngunit hindi mo ginagawa pa sa iyong repositoryo, magagawa mong patakbuhin ang `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

Ang master branch ni Pablo ay magagamit na ngayon na lokal bilang `pb/master` -- maaari mo itong pagsamahin sa isa sa iyong mga branch, o maaari mong suriin ang lokal branch sa puntong iyon kung gusto mo siyasatin ito.
(Magpapasa tayo kung anong mga branch ay at kung paano gamitin sila sa mas detalyado sa <<_git_branching#_git_branching>>.)

[[_fetching_and_pulling]]
==== Pagkukuha at Paghihila mula sa iyong mga Remote

Tulad ng iyong nakikita, upang makakuha ng datos mula sa iyong remote na mga proyekto, maaari kang magtakbo:(((git commands, fetch)))

[source,console]
----
$ git fetch <remote>
----

Ang utos ay napupunta sa remote na proyekto na iyon at hinihila pababa ang lahat ng datos mula sa remote na proyekto na iyon na wala ka pa.
Pagkatapos mong gawin ito, dapat kang magkaroon ng mga reperensya sa lahat ng mga branch mula sa remote na iyon, kung saan maaari mong  pagsamahin o siyasatin sa aumang oras.

Kung mag-clone ka ng isang repositoryo, ang utos ay awtomatikong nagdagdag ng remote na repositoryo na iyon sa ilalim ng pangalan  ``origin''.
Kaya, `git fetch origin` ay kumukuha ng anumang bagong trabaho na naitulak sa server na iyon mula nang na-clone (o huling pagkuha mula) nito.
Mahalaga ito na tandaan na ang `git fetch` utos lamang ng mga download sa datos sa iyong lokal na repositoryo -- ito ay hindi awtomatikong nagsasama ito sa anumang mga trabaho mo o baguhin kung ano ang kasalukuyang tinatrabaho.
Kailangan mong pagsamahin ito ng mano-mano sa iyong trabaho kapag ikaw ay handa na.

Kung ang iyong kasalukuyang branch ay naka-set up upang subaybayan ang remote na branch (tingnan ang susunod na seksyon at <<_git_branching#_git_branching>> para sa karagdagang impormasyon), pwede kang gumagamit ng `git pull` na utos upang awtomatikong kukuha at pagkatapos pagsamahin ang remote na branch sa iyong kasalukuyang branch.(((git commands, pull)))
Ito ay maaaring maging mas madali o maginhawang workflow para sa iyo; at bilang default, ang `git clone` na utos ay awtomakong nag-set up ng iyong lokal na branch upang subaybayan ang remote na master branch (o anumang default branch ay tinatawag) sa server na naka-clone ka.
Pagtakbo ng `git pull` karaniwang kumukuha ng datos mula sa server na iyong orihinal na na-clone noon at awtomatikong nagsusubok na pagsamahin ito sa de na kasalukuyang tinatrabaho.

[[_pushing_remotes]]
==== Pagtulak sa iyong mga Remote

Kapag mayroon kang proyekto sa isang punto na gusto mong ibahagi, kailangan mong itulak ito sa upstream.
Ang utos para dito ay simple: `git push <remote> <branch>`.(((git commands, push)))
Kung gusto mo itulak sa iyong master branch sa iyong `origin` na server (muli, pag-clone sa pangkalahatan ay nagtatakda ng kapwa sa mga pangalan na iyon para sa iyo awtomatiko), pagkatapos ay maaari kang tumakbo nito upang itulak ang anumang mga commits na nagawa mo na  back up sa server:

[source,console]
----
$ git push origin master
----

Ang utos na ito ay gumagana lamang kung ikaw ay naka-clone mula sa isang server na kung saan meron kang pahintulot na magsulat at kung walang tayo  and if nobody na nagtulak sa pansamantala.
Kung ikaw at sinumang iba ang mag-clone sa parehong oras at sila ay nagtulak upstream at pagkatapos ikaw ay nagtulak upstream, ang iyong pagtulak ay tamang tatanggihan.
Magkakaroon ka upang makuha ang kanilang trabaho muna at isama ito sa iyo bago ikaw ay pinapahintulutan na magtulak.
Tingnan <<_git_branching#_git_branching>> para sa mga karagdagang detalye kung papaano magtulak sa remote na mga server.

[[_inspecting_remote]]
==== Siyasatin ang Remote

Kung gusto mo na tumingin pa ng maraming impormasyon tunkol sa partikular na remote, maaari mong gamiton ang `git remote show <remote>` na utos.(((git commands, remote)))
Kung patakbuhin mo itong utos na ito na may isang partikular na shortname, tulad ng `origin`, makakuha ka ng ganito:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

Naglilista ito ng URL para sa remote na repositoryo pati na rin ang pasubaybay ng impormasyon ng branch.
Nakakatulong ang utos na nagsasabi sa iyo na kung ikaw ay nasa master branch at ikaw ay nagpatakbo ng `git pull`, awtomatiko itong nagsasama sa master branch na nasa remote bago ito makukuha sa lahat ng remote na mga reperensiya.
Naglilista din ito ng lahat ng remote na mga reperensiya nito na nakuha pababa.

Iyon ay isang simpleng halimbawa na malamang ikaw ay makatagpo.
Kapag ikaw ay gumagamit ng Git na mas mabigat, gayunman, maaari kang makakita ng mas maraming impormasyon mula sa `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Ipinakita ang utos na ito na kung saan ang branch ay awtomatikong tumulak kapag ikaw ay nagpatakbo ng `git push` habang sa ilang mga branch.
Ito rin ay nagpapakita sa iyo kung saang remote na mga branch ang nasa server na ikaw ay wala pa, kung saan ang remote na mga branch na meron ka na inalis mula sa server, at maraming lokal na mga branch na magagawang awtomatikong mapagsama ang kanilang remote-tracking  branch kapag nagpatakbo ka ng `git pull`.

==== Pagpapalit ng pangalan at Pag-aalis ng mga Remote

Maaari kang tumakbo ng `git remote rename` upang baguhin ang isang remote na shortname.(((git commands, remote)))
Halimbawa, kung ikaw ay gustong magbago ng pangalan ng `pb` sa `paul`, maaari mo itong gawin na `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Ito ay mahalagang banggitin na ang pagbabagong ito sa lahat ng iyong remote-tracking na pangalang ng branch names, rin.
Ano ang ginamit upang maging reperensiya nasa `pb/master` at ngayon ay nasa `paul/master`.

Kung ikaw gusto mong tanggalin ang remote para sa ilang rason -- inilipat mo ang server o hindi na ginagamit ang isang partikular na mirror, o marahil ang isang umaambag ay hindi na aambag muli -- maaari mong gamitin ang `git remote remove` o `git remote rm`:

[source,console]
----
$ git remote remove paul
$ git remote
origin
----

Sa sandaling matanggal mo ang reperensiya sa isang remote sa ganitong paraan, lahat ng remote-tracking na mga branch at mga configuration setting na nauugnay na may remote ay tinanggal din.
