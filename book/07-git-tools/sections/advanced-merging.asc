[[_advanced_merging]]
=== Advanced na Pag-merge

Ang pag-merge sa Git ay karaniwang medyo madali.
Dahil ang Git ay nagagawa nito ipadali ang pag-merge sa ibang branch ng maraming beses, ito ay nangangahulugan na maaari ka na merong isang matagal nang buhay na branch ngunit maaari mong panatilihin ang pinakabago habang ikaw ay gumagamit, paglutas ng maliit na mga kasalungat ng madalas, sa halip na mabigla ng isang napakalaking salungat sa katapusan ng serye.

Gayunpaman, minsan nakakalito ang mga salungatan na magaganap.
Di tulad ng ibang mga bersyon na kontrol na mga sistema, ang Git ay hindi susubok upang maging sobrang matalino tungkol sa pagsama ng pagsasalungatan na resolusyon.
Ang pilisopiya ng Git ay dapat maging talino tungkol sa pagtukoy kapag ang isang merge na resolusyon ay hindi malabo, ngunit kung may isang salungat, hindi ito sinubukan na maging matalino tungkol sa awtomatikong palutas nito.
Samakatuwid, kung ikaw ay naghintay nang sobrang tagal upang i-merge ang dalawang branch na mabilis na nagbabagu-bago, maaari kang magpatakbo ng ilang mga isyu.

Sa seksyon na ito, kami ay magpapatuloy kung ano ang mga maaaring isyu at anong mga kasangkapan na nagbibigay tulong upang panghawakan ang mga ito na mas madayang mga sitwasyon.
At saka tatalakayin din natin ang iba't iba, na hindi pamantayan na mga uri ng mga merge na maaari mong gawin, pati na rin makita kung paano umatras sa mga merge na iyong nagawa.

==== Pag-merge sa mga Kasalungat

Habang nasakop natin ang maraming mga batayan sa paglulutas ng merge na mga salungat sa <<_git_branching#_basic_merge_conflicts>>, para sa higit na kumplikado na mga salungat, Ang Git ay nagbibigay na ilang mga kasangkapan para tulungan ka na tingnan kung ano ang nangyayari at kung paano mas mahusay na makitungo sa mga salungat.

Una sa lahat, kung sa lahat ay posible, subukan na siguraduhin na ang iyong tinatrabahong direktoryo ay malinis bago magsagawa ng merge na maaaring magkakaroon ng mga salungat.
Kung merong kang trabaho na nasa proseso, alinmang i-commit ito sa isang pansamantalang branch o itago ito.
Ginagawa ito nito para maka-undo ka ng *anumang bagay* na sinubukan mo dito.
Kung meron kang hindi na-save na mga pagbabago sa iyong tintrabahong direktoryo kapag sinubukan mong i-merge, ilan sa mga tip na ito ay tumutulong sayo na mawala ang trabahong iyon.

Tingnan nating mabuti ang pinakasimpleng halimbawa.
Mayroon tayong isang sobrang simple na Ruby file na nagpri-print ng 'hello world'.

[source,ruby]
----
#! /usr/bin/env ruby

def hello
  puts 'hello world'
end

hello()
----

Sa repositoryo natin, tayo ay lilikha ng isang bagong branch na tinatawag na `whitespace` at magpatuloy upang baguhin ang lahat na nagtatapos sa linyang Unix hanggang sa nagtatapos sa linyang DOS, na mahalagang nagbabago bawat linya sa file, pero basta may whitespace.
Then we change the line ``hello world'' to ``hello mundo''.

[source,console]
----
$ git checkout -b whitespace
Switched to a new branch 'whitespace'

$ unix2dos hello.rb
unix2dos: converting file hello.rb to DOS format ...
$ git commit -am 'converted hello.rb to DOS'
[whitespace 3270f76] converted hello.rb to DOS
 1 file changed, 7 insertions(+), 7 deletions(-)

$ vim hello.rb
$ git diff -b
diff --git a/hello.rb b/hello.rb
index ac51efd..e85207e 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,7 @@
 #! /usr/bin/env ruby

 def hello
-  puts 'hello world'
+  puts 'hello mundo'^M
 end

 hello()

$ git commit -am 'hello mundo change'
[whitespace 6d338d2] hello mundo change
 1 file changed, 1 insertion(+), 1 deletion(-)
----

Ngayon tayo at lilipat pabalik sa ating `master` na branch at magdagdag ng maraming dokumentasyon para sa function.

[source,console]
----
$ git checkout master
Switched to branch 'master'

$ vim hello.rb
$ git diff
diff --git a/hello.rb b/hello.rb
index ac51efd..36c06c8 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,5 +1,6 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
   puts 'hello world'
 end

$ git commit -am 'document the function'
[master bec6336] document the function
 1 file changed, 1 insertion(+)
----

Ngayon ay sinusubukan aming na i-merge sa ating `whitespace` na branch at makakuha tayo ng mga salungat dahil sa whitespace na mga pagbabago.

[source,console]
----
$ git merge whitespace
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Automatic merge failed; fix conflicts and then commit the result.
----

[[_abort_merge]]
===== Pag-abort ng Merge

Tayo ngayon ay maroon nang ilang mga opsyon.
Una, talakayin natin kung papaano makalabas sa sitwasyon na ito.
Kung sasabihin mo na ikaw ay hindi umaasa ng mga salungat at hindi gusto ang medyong pakikitungo sa sitwasyon, maaari kang hindi magpatuloy sa pag-merge ng `git merge --abort`.

[source,console]
----
$ git status -sb
## master
UU hello.rb

$ git merge --abort

$ git status -sb
## master
----

Ang `git merge --abort` na opsyon na susubukang ibalik muli sa estado bago magpatakbo ng merge.
Ang tanging mga kaso na kung saan ay hindi perpektong makagawa kung ito ay hindi naitago, ang mga hindi nai-commit na mga pagbabago sa iyong tinatrabahong direktoryo kapag pinatakbo mo ito, kung hindi man ay dapat itong gumana ng maayos.

Para sa kadahilanan na gusto mo lang magsimulang muli, maaari ka ding magpatakbo ng `git reset --hard HEAD`, at ang iyong repositoryo ay babalik sa huling na-commit na estado.
Tandaan na anumang hindi nai-commit na trabaho ay mawawala, kaya siguraduhin mo ang anumang pagbabago.

===== Hindi pinansin na Whitespace

Sa ganitong partikular na kaso, ang mga salungat ay may kaugnay sa whitespace.
Alam natin ito dahil ang kaso ay simple, ngunit ito ay medyo madali rin na sabihin sa totoong mga kaso kapag tiningnan ang salungat dahil sa bawat linya ay inalis sa isang banda at dinagdag uli sa iba.
Bilang default, ang Git ay nakakakita ng lahat na ito na mga linya bilang nabago, kaya ito ay hindi ma-merge ang mga file.

Ang default na diskarte ng pag-merge ay bagaman maaaring tumanggap ng maraming mga argumento, at ilang sa kanila ay tungkol sa maayos na pagbalewala ng mga pagbabago sa whitespace.
Kung ikaw ay makakita na merong kang maraming mga isyu sa whitespace sa isang merge, maaari mong itigil ito at ulitin uli, sa ngayon may `-Xignore-all-space` o `-Xignore-space-change`.
Ang unang opsyon ay nagbabalewala sa whitespace na *ganap* kung nagkukumpara ng mga linya, ang pangalawa ay nagtuturing sa sunod-sunod sa isa o higit na whitespace na mga karaker bilang katumbas.

[source,console]
----
$ git merge -Xignore-space-change whitespace
Auto-merging hello.rb
Merge made by the 'recursive' strategy.
 hello.rb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
----

Dahil sa kasong ito, ang aktwal na pagbabago ng file ay hindi nagkakasalungat, na kapag babalewalain ang whitespace na mga pagbabago, ang lahat ay magme-merge na okey lang.

Ito ay isang nagliligtas ng buhay kung ikaw ay may isang tao sa iyong koponan na gusto na paminsan-minsan na mag-reformat ng lahat ng bagay mula sa mga space hanggang sa mga tab o baliktad.

[[_manual_remerge]]
===== Manual File Re-merging

Kahit na humahawak ang Git sa whitespace pre-processing ng mabuti, may iba pang mga uri ng mga pagbabago na marahil hindi mahawakan ng awtomatiko, ngunit ay naka scriptable na mga pag-aayos.
Bilang isang halimbawa, magpanggap tayo na ang Git ay hindi makahawak ng binago na whitespace at kailangan nating gawin ito sa pamamagitan ng ating mga kamay.

Ano talaga ang kailangan nating gawin ay ang patakbuhin ang file na sinusubukan nating i-merge sa pamamagitan ng isang `dos2unix` na programa bago sinusubukan ang aktwal file na nai-merge.
Kaya paano natin ito gawin?

Una, kailangan natin pumunta sa merge na salungat na estado.
Pagkatapos ay gusto nating kunin ang mga kopya sa aking bersyon sa file, ang kanilang bersyon(mula sa branch kami ay nagme-merge) at ang karaniwang bersyon (mula sa kung saang magkabilang panig na na-branch off).
Pagkatapos gusto nating ayusin ng maaga sa kanilang panig o sa aming panig at subukang muli ang pag-merge muli para sa solong file lamang.

Pagkuha ng tatlong mga bersyon ng file ay talagang medyo madali.
Ang Git ay nag-iipon ng lahat ng mga bersyon na ito sa index sa ilalim ng ``stages'' na ang bawat isa ay may mga numero na nag-uugnay sa kanila.
Ang Stage 1 ay isang pangkaraniwang ninuno, ang stage 2 ay iyong bersyon at stage 3 ay mula sa `MERGE_HEAD`, ang bersyon na iyong i-merge sa (``theirs'').

Maaari mong kunin ang isang kopya sa bawat bersyon na ito sa sumasalungat na file na may `git show` na utos at isang espesyal na syntax.

[source,console]
----
$ git show :1:hello.rb > hello.common.rb
$ git show :2:hello.rb > hello.ours.rb
$ git show :3:hello.rb > hello.theirs.rb
----

Kung gusto mong makakuha ng isang maliit na mas hard core, maaari mo ding gamitn ang `ls-files -u` na plumbing na utos command para makuha ang aktwal na SHA-1s sa Git blobs para sa bawat mga file na ito.

[source,console]
----
$ git ls-files -u
100755 ac51efdc3df4f4fd328d1a02ad05331d8e2c9111 1	hello.rb
100755 36c06c8752c78d2aff89571132f3bf7841a7b5c3 2	hello.rb
100755 e85207e04dfdd5eb0a1e9febbc67fd837c44a1cd 3	hello.rb
----

Ang `:1:hello.rb` ay isa lamang shorthand para sa pagtingin na sa blob SHA-1.

Ngayon na mayroon kaming laman sa lahat ng tatlong mga stage sa aming tinatrabahong direktoryo, maaari nating mano-mano na ayusin ang kanilang aayusin na whitespace na isyu at i-merge uli ang file na may hindi gaaanong kilala `git merge-file` na utos na ginagawa lamang iyon.

[source,console]
----
$ dos2unix hello.theirs.rb
dos2unix: converting file hello.theirs.rb to Unix format ...

$ git merge-file -p \
    hello.ours.rb hello.common.rb hello.theirs.rb > hello.rb

$ git diff -b
diff --cc hello.rb
index 36c06c8,e85207e..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,8 -1,7 +1,8 @@@
  #! /usr/bin/env ruby

 +# prints out a greeting
  def hello
-   puts 'hello world'
+   puts 'hello mundo'
  end

  hello()
----

Mula rito kami ay mabuting naka-merge sa file.
Sa katunayan, talagang gumagana itong mas mahusay kaysa sa `ignore-space-change` na opsyon dahil ito talaga ay nag-aayos sa pagbabago ng whitespace bago nai-merge sa halip na balewalain ang mga ito.
Ang nasa `ignore-space-change` na merge, talagang natapos na kami na may ilang linya na may nagtatapos na DOS na linya, gumgawa ng mga bagay na magkahalo.

Kung gusto mong makakuha ng isang ideya bago ang pagwawakas ng commit na ito tungkol sa kung ano ang tunay na nabago sa pagitan ng isang panig o ang iba, maaari mong tanungin ang `git diff` para ikumpara kung ano ang nasa iyong tinatrabahong direktoryo na malapit mo nang i-commit bilang resulta sa pag-merge ng anumang mga stage na ito.
Talakayin natin ang lahat na ito.

Para ikumpara ang iyong resulta sa kung ano ang nasa iyong branch bago ang merge, sa ibang salita, para tingnan kung ano ang naipakilala na nai-merge, maaari kang magpatakbo ng `git diff --ours`

[source,console]
----
$ git diff --ours
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index 36c06c8..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -2,7 +2,7 @@

 # prints out a greeting
 def hello
-  puts 'hello world'
+  puts 'hello mundo'
 end

 hello()
----

Kaya narito kami para madaling makita kung anong ang nangyari sa ating branch, na kung ano talaga ang ipinakilala sa file sa pag-merge nito, ay nagbabago sa solong linya.

Kung gusto nating tingnan ang resulta sa merge differed mula sa kung ano ang nasa kanilang panig, maaari kang magpatakbo ng `git diff --theirs`.
Dito sa at ang sumusunod na halimbawa, kailangan nating gamitin ang `-b` upang alisin ang whitespace dahil ikukumpara natin ito kung ano ang nasa Git, hindi ang ating nalinis na `hello.theirs.rb` na file.

[source,console]
----
$ git diff --theirs -b
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index e85207e..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,5 +1,6 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
   puts 'hello mundo'
 end
----

Sa wakas, makikita mo kung paano ang file nagbago mula magkabilang panig sa `git diff --base`.

[source,console]
----
$ git diff --base -b
* Unmerged path hello.rb
diff --git a/hello.rb b/hello.rb
index ac51efd..44d0a25 100755
--- a/hello.rb
+++ b/hello.rb
@@ -1,7 +1,8 @@
 #! /usr/bin/env ruby

+# prints out a greeting
 def hello
-  puts 'hello world'
+  puts 'hello mundo'
 end

 hello()
----

Mula rito pwede nating gamitin ang `git clean` na utos upang malinis ang dagdag na mga file na ginawa natin upang gawin ang manu-manong pag-merge ngunit hindi na kinakailangan.

[source,console]
----
$ git clean -f
Removing hello.common.rb
Removing hello.ours.rb
Removing hello.theirs.rb
----

[[_checking_out_conflicts]]
===== Sinusuring ang mga Salungat

Marahil hindi tayo masaya sa resolusyon sa puntong ito para sa ilang kadahilanan, o maaaring mano-manong pag-edit sa isa o kapwa panig na hindi pa rin gumagana ng maayos at kakailanganin ng mas maraming konteksto.

Tayo ay magbago ng halimbawa ng kaunti.
Para sa halimbawa na ito, mayroon tayong dalawang matagal na mga branch na ang bawat isa ay may ilang mga commit sa kanila ngunit lumikha ng isang lehitimong nilalaman na sumalungat kapag nai-merge.

[source,console]
----
$ git log --graph --oneline --decorate --all
* f1270f7 (HEAD, master) update README
* 9af9d3b add a README
* 694971d update phrase to hola world
| * e3eb223 (mundo) add more tests
| * 7cff591 add testing script
| * c3ffff1 changed text to hello mundo
|/
* b7dcc89 initial hello world code
----

Kapag meron ka nang tatlong natatanging mga commit na nabuhay lamang sa `master` na branch at tatlong iba pa na nabuhay sa `mundo` na branch.
Kung subukan natin i-merge sa `mundo` na branch, makakuha tayo ng pagsasalungat.

[source,console]
----
$ git merge mundo
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Automatic merge failed; fix conflicts and then commit the result.
----

Gusto namin tingnan kung ano ang salungat sa merge.
Kung buksan natin ang file, makikita natin ang ibang bagay na tulad nito:

[source,ruby]
----
#! /usr/bin/env ruby

def hello
<<<<<<< HEAD
  puts 'hola world'
=======
  puts 'hello mundo'
>>>>>>> mundo
end

hello()
----

Bawat panig sa merge ay nagdaragdag ng nilalaman sa file na ito, ngunit marami sa mga commit na nagbago sa file sa parehong lugar na sanhi sa pagkasalungat nito.

Talakayin natin ang karamihan sa mga kasangkapan na sa ngayon ay alam mo na iyong magagamit upang malaman kung papaano ang pagkasalungat ay dumating.
Marahil ito ay hindi halata kung gaano ka eksakto na dapat mong ayusin ang salungat.
Kailangan mo ng maraming konteksto.

Isang matulugin na kasangkapan ay ang `git checkout` kasama ang `--conflict' na opsyon.
Ito ay magre-checkout muli sa file at papalitan ang salungat na merge na mga marka.
Maaari itong makakatulong kung gusto mong i-reset ang mga marker at subukan na malutas silang muli.

Maaari mong ipasa ang `--conflict` alinman `diff3` o `merge` (kung saan ay ang default).
Kung ipapasa mo ito sa `diff3`, ang Git ay gagamit ng isang bahagyang bersyon sa salungat na mga marka , di lamang nagbibigay sayo ng ``ours'' at ``theirs'' na mga bersyon, ngunit ang ``base'' din na bersyon na nasa linya upang magbigyan ka ng maraming konteksto.

[source,console]
----
$ git checkout --conflict=diff3 hello.rb
----

Sa sandaling patakbuhin natin yan, ang file ay kamukha nito sa halip:

[source,ruby]
----
#! /usr/bin/env ruby

def hello
<<<<<<< ours
  puts 'hola world'
||||||| base
  puts 'hello world'
=======
  puts 'hello mundo'
>>>>>>> theirs
end

hello()
----

Kung gusto mo ang format na ito, maaari kang magtakda nito bilang default para sa hinaharap na merge na mga salungat sa pamamagitan ng pagtatakda ng `merge.conflictstyle` at pagtatakda sa `diff3`.

[source,console]
----
$ git config --global merge.conflictstyle diff3
----

Ang `git checkout` na utos ay maaari ding kumuha ng `--ours` at `--theirs` na mga opsyon, na kung saan ay maaaring maging isang tunay na mabilis na paraan sa pagpili pa lamang alinman sa isang panig o sa iba na hindi naka merge sa mga bagay sa lahat.

Ito ay maaaring maging partikular na kapaki-pakinabang para sa mga salungat na mga binary file na kung saan maaari mo lamang pumili ng isang panig, o kung saan gusto lamang i-merge ang tiyak na mga file mula sa ibang branch - maaari mo ding gawin ang pag-merge at pagkatapos i-checkout tiyak na mga file mula sa isang panig o sa iba bago mag-commit.

[[_merge_log]]
===== Pag-merge ng Log

Ang kapaki-pakinabang na kasangkapan kapag naglutas ng merge na mga salungat ay ang `git log`.
Ito ay nakakatulong sayo na kunin ang konteksto na sa kung ano ang maaaring maiiambag sa mga salungat.
Pagrepaso nang kaunti sa kasaysayan para tandaan kung bakit ang dalawang mga linya sa development na hinhawakan natin sa parehong nakakatulong minsan.

Para makakuha ng buong listahan sa lahat ng natatanging mga commit na nakasali sa alinmang branch na sangkot sa merge na ito, maaari nating gamitin ang ``triple dot'' na syntax na natutunan natin sa <<_git_tools#_triple_dot>>.

[source,console]
----
$ git log --oneline --left-right HEAD...MERGE_HEAD
< f1270f7 update README
< 9af9d3b add a README
< 694971d update phrase to hola world
> e3eb223 add more tests
> 7cff591 add testing script
> c3ffff1 changed text to hello mundo
----

Iyan ay magandang listahan sa anim na kabuuang mga commit na kasangkot, pati na rin kung aling linya sa development para sa bawat commit na nangyayari.

Maari tayong higit pa na magpasimple upang bigyan ng mas tiyak na konteksto.
Kung idagdag natin ang `--merge` na opsyon sa `git log`, ito ay nagpapakita lamang ng mga commit alinmang panig sa merge na nakahawak ng isang file na kasalukuyang may na salungat.

[source,console]
----
$ git log --oneline --left-right --merge
< 694971d update phrase to hola world
> c3ffff1 changed text to hello mundo
----

Kung nagpapatakbo ka gamit ang `-p` na opsyon na sa halip, ikaw ay makakuha lamang ng diffs sa file na nagtatapos ng pagkasalungat.
Ito ay maaaring *talagang* kapaki-pakinabang sa mabilis na pagbibigay sayo ng konteksto na kailangan mo ng tulong na maunawaan kung bakit isang bagay ang mga kasalungat at kung papaano mas matalinong malutas ito.

===== Pinagsamang Diff na Format

Dahil ang mga Git ay nag-stage ng anumang mga resulta ng merge na matagumpay, kapag pinatakbo mo ang `git diff` habang nasa pagkasalungat na merge na estado, ikaw ay makakuha lamang kung ano ang kasalukuyang nasa pagkasalungat.
Maaari itong matulungin upang makita kung ano ang hindi pa nalutas.

Kapag pinatakbo mo ang `git diff` direkta matapos ang isang merge na salungat, ito ay nagbibigay ng impormasyon na sa halip ay natatanging diff output na format.

[source,console]
----
$ git diff
diff --cc hello.rb
index 0399cd5,59727f0..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,11 @@@
  #! /usr/bin/env ruby

  def hello
++<<<<<<< HEAD
 +  puts 'hola world'
++=======
+   puts 'hello mundo'
++>>>>>>> mundo
  end

  hello()
----

The format is called ``Combined Diff'' and gives you two columns of data next to each line.
The first column shows you if that line is different (added or removed) between the ``ours'' branch and the file in your working directory and the second column does the same between the ``theirs'' branch and your working directory copy.

So in that example you can see that the `<<<<<<<` and `>>>>>>>` lines are in the working copy but were not in either side of the merge.
This makes sense because the merge tool stuck them in there for our context, but we're expected to remove them.

If we resolve the conflict and run `git diff` again, we'll see the same thing, but it's a little more useful.

[source,console]
----
$ vim hello.rb
$ git diff
diff --cc hello.rb
index 0399cd5,59727f0..0000000
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end

  hello()
----

This shows us that ``hola world'' was in our side but not in the working copy, that ``hello mundo'' was in their side but not in the working copy and finally that ``hola mundo'' was not in either side but is now in the working copy.
This can be useful to review before committing the resolution.

You can also get this from the `git log` for any merge to see how something was resolved after the fact.
Git will output this format if you run `git show` on a merge commit, or if you add a `--cc` option to a `git log -p` (which by default only shows patches for non-merge commits).

[source,console]
----
$ git log --cc -p -1
commit 14f41939956d80b9e17bb8721354c33f8d5b5a79
Merge: f1270f7 e3eb223
Author: Scott Chacon <schacon@gmail.com>
Date:   Fri Sep 19 18:14:49 2014 +0200

    Merge branch 'mundo'

    Conflicts:
        hello.rb

diff --cc hello.rb
index 0399cd5,59727f0..e1d0799
--- a/hello.rb
+++ b/hello.rb
@@@ -1,7 -1,7 +1,7 @@@
  #! /usr/bin/env ruby

  def hello
-   puts 'hola world'
 -  puts 'hello mundo'
++  puts 'hola mundo'
  end

  hello()
----

[[_undoing_merges]]
==== Undoing Merges

Now that you know how to create a merge commit, you'll probably make some by mistake.
One of the great things about working with Git is that it's okay to make mistakes, because it's possible (and in many cases easy) to fix them.

Merge commits are no different.
Let's say you started work on a topic branch, accidentally merged it into `master`, and now your commit history looks like this:

.Accidental merge commit
image::images/undomerge-start.png[Accidental merge commit.]

There are two ways to approach this problem, depending on what your desired outcome is.

===== Fix the references

If the unwanted merge commit only exists on your local repository, the easiest and best solution is to move the branches so that they point where you want them to.
In most cases, if you follow the errant `git merge` with `git reset --hard HEAD~`, this will reset the branch pointers so they look like this:

.History after `git reset --hard HEAD~`
image::images/undomerge-reset.png[History after `git reset --hard HEAD~`.]

We covered `reset` back in <<_git_tools#_git_reset>>, so it shouldn't be too hard to figure out what's going on here.
Here's a quick refresher: `reset --hard` usually goes through three steps:

. Move the branch HEAD points to.
  In this case, we want to move `master` to where it was before the merge commit (`C6`).
. Make the index look like HEAD.
. Make the working directory look like the index.

The downside of this approach is that it's rewriting history, which can be problematic with a shared repository.
Check out <<_git_branching#_rebase_peril>> for more on what can happen; the short version is that if other people have the commits you're rewriting, you should probably avoid `reset`.
This approach also won't work if any other commits have been created since the merge; moving the refs would effectively lose those changes.

[[_reverse_commit]]
===== Reverse the commit

If moving the branch pointers around isn't going to work for you, Git gives you the option of making a new commit which undoes all the changes from an existing one.
Git calls this operation a ``revert'', and in this particular scenario, you'd invoke it like this:

[source,console]
----
$ git revert -m 1 HEAD
[master b1d8379] Revert "Merge branch 'topic'"
----

The `-m 1` flag indicates which parent is the ``mainline'' and should be kept.
When you invoke a merge into `HEAD` (`git merge topic`), the new commit has two parents: the first one is `HEAD` (`C6`), and the second is the tip of the branch being merged in (`C4`).
In this case, we want to undo all the changes introduced by merging in parent #2 (`C4`), while keeping all the content from parent #1 (`C6`).

The history with the revert commit looks like this:

.History after `git revert -m 1`
image::images/undomerge-revert.png[History after `git revert -m 1`.]

The new commit `^M` has exactly the same contents as `C6`, so starting from here it's as if the merge never happened, except that the now-unmerged commits are still in `HEAD`'s history.
Git will get confused if you try to merge `topic` into `master` again:

[source,console]
----
$ git merge topic
Already up-to-date.
----

There's nothing in `topic` that isn't already reachable from `master`.
What's worse, if you add work to `topic` and merge again, Git will only bring in the changes _since_ the reverted merge:

.History with a bad merge
image::images/undomerge-revert2.png[History with a bad merge.]

The best way around this is to un-revert the original merge, since now you want to bring in the changes that were reverted out, *then* create a new merge commit:

[source,console]
----
$ git revert ^M
[master 09f0126] Revert "Revert "Merge branch 'topic'""
$ git merge topic
----

.History after re-merging a reverted merge
image::images/undomerge-revert3.png[History after re-merging a reverted merge.]

In this example, `M` and `^M` cancel out.
`^^M` effectively merges in the changes from `C3` and `C4`, and `C8` merges in the changes from `C7`, so now `topic` is fully merged.

==== Other Types of Merges

So far we've covered the normal merge of two branches, normally handled with what is called the ``recursive'' strategy of merging.
There are other ways to merge branches together however.
Let's cover a few of them quickly.

===== Our or Theirs Preference

First of all, there is another useful thing we can do with the normal ``recursive'' mode of merging.
We've already seen the `ignore-all-space` and `ignore-space-change` options which are passed with a `-X` but we can also tell Git to favor one side or the other when it sees a conflict.

By default, when Git sees a conflict between two branches being merged, it will add merge conflict markers into your code and mark the file as conflicted and let you resolve it.
If you would prefer for Git to simply choose a specific side and ignore the other side instead of letting you manually resolve the conflict, you can pass the `merge` command either a `-Xours` or `-Xtheirs`.

If Git sees this, it will not add conflict markers.
Any differences that are mergeable, it will merge.
Any differences that conflict, it will simply choose the side you specify in whole, including binary files.

If we go back to the ``hello world'' example we were using before, we can see that merging in our branch causes conflicts.

[source,console]
----
$ git merge mundo
Auto-merging hello.rb
CONFLICT (content): Merge conflict in hello.rb
Resolved 'hello.rb' using previous resolution.
Automatic merge failed; fix conflicts and then commit the result.
----

However if we run it with `-Xours` or `-Xtheirs` it does not.

[source,console]
----
$ git merge -Xours mundo
Auto-merging hello.rb
Merge made by the 'recursive' strategy.
 hello.rb | 2 +-
 test.sh  | 2 ++
 2 files changed, 3 insertions(+), 1 deletion(-)
 create mode 100644 test.sh
----

In that case, instead of getting conflict markers in the file with ``hello mundo'' on one side and ``hola world'' on the other, it will simply pick ``hola world''.
However, all the other non-conflicting changes on that branch are merged successfully in.

This option can also be passed to the `git merge-file` command we saw earlier by running something like `git merge-file --ours` for individual file merges.

If you want to do something like this but not have Git even try to merge changes from the other side in, there is a more draconian option, which is the ``ours'' merge _strategy_.
This is different from the ``ours'' recursive merge _option_.

This will basically do a fake merge.
It will record a new merge commit with both branches as parents, but it will not even look at the branch you're merging in.
It will simply record as the result of the merge the exact code in your current branch.

[source,console]
----
$ git merge -s ours mundo
Merge made by the 'ours' strategy.
$ git diff HEAD HEAD~
$
----

You can see that there is no difference between the branch we were on and the result of the merge.

This can often be useful to basically trick Git into thinking that a branch is already merged when doing a merge later on.
For example, say you branched off a `release` branch and have done some work on it that you will want to merge back into your `master` branch at some point.
In the meantime some bugfix on `master` needs to be backported into your `release` branch.
You can merge the bugfix branch into the `release` branch and also `merge -s ours` the same branch into your `master` branch (even though the fix is already there) so when you later merge the `release` branch again, there are no conflicts from the bugfix.

include::subtree-merges.asc[]
