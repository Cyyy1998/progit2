[[_git_commands]]
[appendix]
== Mga Kautusan ng Git

Sa buong aklat ipinakilala namin ang dose-dosenang mga kautusan ng Git at sinubukang ipakilala ang mga ito sa pamamagitan ng pagsalaysay, dahan-dahang magdagdag ng maraming mga kautusan sa kuwento.
Gayunpaman, ito ay nagbigay sa amin ng mga halimbawa sa paggamit ng mga kautusan na medyo watak-watak sa buong aklat.

Sa apendiks na ito, tayo ay dadaan sa lahat ng mga kautusan ng Git na binanggit natin sa buong aklat, na pinagsama ayon sa paggamit nito. Pag-uusapan natin ang bawat kautusan kung ano sa pangkalahatan ang ginagawa nito at pagkatapos ay ipapakita kung saan sa aklat mahahanap ang paggamit nito.

=== Setup at Config 

Mayroong dalawang mga kautusan na madalas ginagamit, mula sa unang mga tawag ng Git hanggang sa karaniwang araw-araw na pag-aayos at sanggunian, ang `config` at `help` na mga kautusan.

==== git config

Ang Git ay may default na paraan sa paggawa ng daan-daang mga bagay.
Karamihan ng mga bagay na ito ay maaari kang magpahayag sa Git na gamitin ang default o di kaya gawin ang mga ito sa ibang paraan, o itakda ang iyong mga kagustuhan.
Ito ay nagsasangkot ng lahat mula sa pagsasabi sa Git kung ano ang pangalan mo hanggang sa mga partikular na kagustuhan sa kulay ng terminal o kung ano ang iyong ginamit na editor.
Maraming mga file ang babasahin at isusulat ng kautusang ito para ikaw ay makatakda ng pangkalahatang halaga o pababa sa partikular na mga repositoryo.

Ang kautusang `git config` ay ginamit sa halos bawat kabanata ng aklat.

Sa <<_getting_started#_first_time>> ginamit namin ito upang tukuyin ang aming pangalan, email address at napiling editor bago pa namin simulan ang paggamit ng Git.

Sa <<_git_basics_chapter#_git_aliases>> ipinakita namin kung paano mo magagamit ito upang lumikha ng pinaikling mga kautusan at lumalawak sa mahabang mga pagkakasunud-sunod ng pagpipilian upang hindi mo kailangang i-type ang mga ito nang paulit-ulit.

Sa <<_git_branching#_rebasing>> ginamit namin ito upang maging `--rebase` ang default kapag nagpatakbo ka ng `git pull`.

Sa <<_git_tools#_credential_caching>> ginamit namin ito upang mag-set up ng isang default na imbakan para sa iyong mga HTTP password.

Sa <<_customizing_git#_keyword_expansion>> ipinakita namin kung paano i-set up mga mantsa at malinis na salaan sa nilalaman na papasok at palabas ng Git.

Sa katapusan, halos ang kabuuan ng <<_git_config>> ay nilaan para sa kautusan.

==== git help

Ang kautusan na `git help` ay ginagamit upang ipakita sa iyo ang lahat ng dokumentasyon na naipadala sa Git tungkol sa anumang kautusan. Habang nagbibigay kami ng kaunting pangkalahatang-ideya sa karamihan sa mga mas sikat na kautusan sa apendiks na ito, para sa buong listahan sa lahat ng mga posibleng pagpipilian at mga flag para sa bawat kautusan, maaari mong laging patakbuhin ang `git help <command>`.

Ipinakilala namin ang kautusang `git help` sa <<_git_help>> at ipinakita sa iyo kung paano gamitin ito upang makahanap ng karagdagang impormasyon tungkol sa `git shell` sa <<_git_on_the_server#_setting_up_server>>.

=== Pagkuha at Paglikha ng Mga Proyekto

Mayroong dalawang mga paraan upang makakuha ng repositoryong Git.
Ang isa ay kopyahin ito mula sa isang umiiral na repositoryo sa network o sa ibang lugar at ang pangalawa ay upang lumikha ng isang bagong umiiral na direktoryo.

==== git init

Para kumuha ng isang direktoryo at maging bagong repositoryong Git sa gayon maaari mong simulan ang bersyon sa pagkontrol nito, maaari mo lamang patakbuhin ang `git init`.

Una naming ipakilala ito sa <<_git_basics_chapter#_getting_a_repo>>, kung saan ipinapakita namin ang paglikha ng isang bagong repositoryo para masimulan mong pagtrabahoan.

Natalakay namin ng maikli tungkol sa kung paano mo palitan ang default na branch mula sa ``master'' sa <<_git_branching# _remote_branches>>.

Ginagamit namin ang command na ito upang lumikha ng repositoryo na walang laman para sa isang server sa <<_git_on_the_server#_bare_repo>>.

Sa katapusan, dumako tayo sa ilang mga detalye na kung ano talaga ang ginagawa nito sa likod ng mga eksena sa <<_git_internals#_plumbing_porcelain>>.

==== git clone

Ang `git clone` na kautusan ay isang bagay na nakabalot sa paligid ng maraming iba pang mga kautusan.
Ito ay nakakalikha ng bagong direktoryo, ito ay papasok sa loob at pinatatakbo ng `git init` upang gawing walang lamang repositoryong Git, magdagdag ng remote (`git remote add`) sa URL na ipinasa mo nito (bilang default na pinangalanang `origin`), pinatatakbo ang `git fetch` mula riyan sa remote na repositoryo at pagkatapos i-checkout ang pinakabagong ginawa sa iyong gumaganang direktoryo sa pamamagitan ng `git checkout`.

Ang `git clone` na kautusan ay ginamit sa dose-dosenang mga dako sa buong libro, ngunit maglilista lang kami ng ilang mga interesanteng mga dako.

Ito ay karaniwang ipinakilala at ipinaliwanag sa <<_git_basics_chapter#_git_cloning>>, kung saan nagbigay kami ng ilang mga halimbawa.

Sa <<_git_on_the_server#_getting_git_on_a_server>> tinitingnan natin sa pamamagitan ng `--bare` na opsyon upang lumikha ng isang kopya ng repositoryong Git na walang gumaganang direktoryo.

Sa <<_git_tools#_bundling>> ginagamit namin ito upang hindi bigkisin isang nakabigkis na repositoryong Git.

Sa katapusan, sa <<_git_tools#_cloning_submodules>> natutunan natin ang `--recurse-submodules` na opsyon upang gumawa ng pag-kopya ng isang repositoryo kasama ang submodules na bahagyang pinasimple.

Kahit na ito ay ginagamit sa iba pang mga dako ng libro, isa ito sa mga medyo natatangi o kung saan ito ay ginagamit sa bahagyang naiibang mga paraan.

=== Pangunahing Snapshotting

Para sa mga pangunahing proseso ng trabaho sa pag-aayos ng nilalaman at pag-commit nito sa iyong kasaysayan, mayroon lamang ilang mga pangunahing kautusan.

==== git add

Ang `git add` na kautusan ay nagdadagdag ng nilalaman mula sa gumaganang direktoryo patungo sa lugar ng pag-stage (o ``index'') para sa susunod na pag-commit.
Kapag ang kautusan ng `git commit` ay gumana, bilang default tinitingnan lamang nito ang lugar ng pag-stage, kaya ang `git add` ay ginagamit upang gawing eksakto kung ano ang nais mong anyo sa susunod na pag-commit ng snapshot.

Ang kautusan na ito ay sobrang mahalagang utos sa Git at nabanggit o ginamit ng maraming beses sa aklat na ito.
Mabilis naming isasali ang mga dipangkaraniwang mga paggamit nito na maaring makita.

Una naming ipinakilala at ipaliwanag ang `git add` nang detalyado sa <<_git_basics_chapter#_tracking_files>>.

Binabanggit namin kung paano gamitin ito upang malutas ang pagsasalungat sa pagsasama sa <<_git_branching#_basic_merge_conflicts>>.

Natalakay din namin ang paggamit nito sa pag-stage lamang ng mga tukoy na bahagi ng isang nabagong file sa << _ git_tools # _interactive_staging >>.

Sa panghuli, kokopyahin namin ito sa isang mababang antas sa <<_git_internals#_tree_objects>>, kaya makakakuha ka ng ideya kung ano ang ginagawa nito sa likod ng mga eksena.

==== git status

Sa `git status` na kautusan ipapakita sa iyo ng  ang iba't ibang mga estado ng mga file sa iyong gumaganang direktoryo at sa lugar ng staging.
Alin sa mga file ang binago at unstaged at kung saan ang mga na staged ngunit hindi pa na commit.
Sa normal na anyo nito, ipapakita rin nito sa iyo ang ilang mga pangunahing pahiwatig kung paano maglipat ng mga file sa pagitan ng mga stage.

Una nating na pag-usapang ang `status` sa << _ git_basics_chapter # _checking_status >>, kapwa ang mga batayan at pinadaling mga form nito.
Habang ginagamit namin ito sa buong libro, halos lahat ng iyong magagawa sa `git status` na utos ay sakop doon.

==== git diff

Ang kautusang `git diff` ay ginagamit kapag nais mong makita ang mga pagkakaiba sa pagitan ng dalawang trees.
Ito ay maaaring pagkakaiba sa pagitan ng iyong gumaganang environment at ang iyong staging na lugar (`git diff` mismo), sa pagitan ng iyong staging na lugar at ang iyong huling commit (`git diff --staged`), o sa pagitan ng dalawang mga commit (`git diff master branchB `).

Una naming natalakay ang mga pangunahing paggamit ng `git diff` sa << _ git_basics_chapter # _git_diff_staged >>, kung saan ipinapakita namin kung paano makita kung ano ang mga pagbabago sa staged at kung ano ang hindi pa na staged.

Ginagamit namin ito upang tumingin para sa posibleng mga isyu sa whitespace bago gumawa ng `- check` na opsyon sa << _ distributed_git # _commit_guidelines >>.

Nakita namin kung paano masuri ang mga pagkakaiba sa pagitan ng mga branch nang mas epektibo sa `git diff A ... B` syntax sa << _ distributed_git # _what_is_introduced >>.

Ginagamit namin ito upang i-filter ang mga pagkakaiba sa whitespace sa `-b` at kung paano ihambing ang iba't ibang yugto ng mga magkakasalungat ng mga file gamit ang` --theirs`, `--ours` at` --base` sa << _ git_tools # _advanced_merging >>.

Sa panghuli, ginagamit namin ito upang epektibong ihambing ang mga pagbabago sa submodule sa `--submodule` sa << _ git_tools # _starting_submodules >>.

==== git difftool

Ang `git difftool` na kautusan ay naglulunsad lamang ng isang panlabas na kasangkapan upang ipakita sa iyo ang pagkakaiba sa pagitan ng dalawang mga tree kung sakaling gusto mong gumamit ng iba pang bagay kaysa sa built in na `git diff` na kautusan.

Binanggit lang namin ito sa <<_git_basics_chapter#_git_diff_staged>>.

==== git commit

Ang `git commit` na kautusan ay kumukuha sa lahat ng mga nilalaman ng file na itinanghal sa `git add` at nagtatala ng isang bagong permanenteng snapshot sa database at pagkatapos ay inililipat ang branch pointer hangang sa kasalukuyang branch nito.

Unang tinalakay natin ang mga pangunahing kaalaman sa pag-commit sa <<_git_basics_chapter#_committing_changes>>. Ipinakita din namin kung paano gamitin ang isang `-a` na flag upang laktawan ang `git add` na hakbang sa pang-araw-araw na daloy ng trabaho at kung paano gamitin ang `-m` na flag upang pumasa ng isang mensaheng commit sa command line sa halip ng pagpapatakbo nito sa editor.

Sa _git_basics_chapter.asc tinalakay namin ang paggamit ng --amend na opsyon upang gawing muli ang pinakabagong commit.

Sa _git_branching.asc, pumunta kami sa mas maraming detalye tungkol sa kung ano ang ginagawa ng git at kung bakit ganito niya ginagawa.

Tiningnan namin kung paano mag-sign ng mga commit na cryptographically kasama ang `-S` na flag sa <<_git_tools#_signing_commits>>.

Panghuli, tinitingnan natin kung ano ang ginagawa ng git commit sa background at kung paano nito aktwal na ipinatupad sa <<_git_internals#_git_commit_objects>>.

==== git reset

Ang utos na `git reset` ay pangunahing ginagamit upang i-undo ang mga bagay, parang maaari mong sabihin sa pamamagitan ng pandiwa. Ito ay gumagalaw sa paligid ng HEAD pointer at opsyonal na nagbabago sa index o sa lugar ng staging at maaari ring opsyonal na baguhin ang gumaganang direktoryo kung gagamitin mo ang `--hard`. Ang pangwakas na opsyon ay posibleng magbura sa iyong tinatrabaho kung ginamit nang hindi tama, kaya tiyaking maunawaan mo ito bago gamitin.

Una naming epektibong tinalakay ang pinakasimpleng paggamit ng git reset sa <<_git_basics_chapter#_unstaging>>, kung saan ginagamit namin ito upang ma unstage isang file na pinatakbo ang `git add`.

Pagkatapos ay tinalakay natin ito ng lubos ang detalye sa <<_git_tools#_git_reset>>, na nakalaan sa pagpapaliwanag sa utos na ito.

Ginagamit namin ang git reset `--hard` upang i-abort ang pagsanib sa <<_git_tools#_abort_merge>>, kung saan ginagamit din namin ang `git merge --abort`, na kung saan ay isang kaunting pagbabalut para sa `git reset` command.

==== git rm

Ang `git rm` command ay ginagamit upang tanggalin ang mga file mula sa lugar ng staging at gumaganang direktoryo para sa Git. Ito ay katulad ng `git add` subalit ito ay magtatanggal ng isang file para sa susunod na commit.

Tinalakay namin ang utos na `git rm` ng iilang detalye sa << _ git_basics_chapter # _removing_files >>, kabilang ang paulit-ulit na pag-alis ng mga file at pag-aalis lamang ng mga file mula sa lugar ng staging ngunit iniiwan ang mga ito sa gumaganang direktoryo na may `--cached`.

Ang tanging iba pang magkakaibang paggamit ng `git rm` sa aklat ay nasa << _ git_internals # _removing_objects >> kung saan ginagamit namin ng maikli at ipinaliwanag ang `--ignore-unmatch` kapag nagpapatakbo ng `git filter-branch`, na kung saan ay pasimpleng hindi nito mag-error-out kapag ang file na sinusubukan naming i-stage ay hindi umiiral.
Maaari itong maging kapaki-pakinabang para sa mga layunin ng pag-script.

==== git mv

Ang utos na `git mv` ay isang manipis na kaginhawahan na utos upang maglipat ng isang file at pagkatapos ay patakbuhin ang` git add` sa bagong file at `git rm` sa lumang file.

Binanggit lamang namin nang maikli ang utos na ito sa << _ git_mv >>.

==== git clean

Ang `git clean` na utos ay ginagamit upang tanggalin ang mga hindi gustong file mula sa iyong gumaganang direktoryo.
Maaaring kabilang dito ang pag-alis ng pansamantalang mga artifact build o pagsamahin ang mga conflict na file.

Tinalakay namin ang karamihang mga pagpipilian at sitwasyon kung saan maaari mong gamitin ang `git clean` na utos sa << _ git_clean >>.

=== Branching at Merging

Iilan lamang ang bilang ng mga utos na karamihang nagpapatupad sa pagsasanib at pagsasama sa Git.

==== git branch

Ang `git branch` command ay talagang isang tool na naayon sa pamamahala ng branch.
Maaari nitong ilista ang mga branch na mayroon ka, lumikha ng isang bagong branch, tanggalin ang mga branch at palitan ang pangalan ng mga branch.

Karamihan ng <<_git_branching#_git_branching>> ay nakatuon sa utos na 'branch` at ginagamit ito sa buong kabanata.
Una naming ipinakilala ito sa <<_git_branching#_create_new_branch>> at kami ay dumaan sa karamihan ng iba pang mga tampok nito (listahan at pagtanggal) sa <<_git_branching#_branch_management>>.

Sa <<_git_branching#_tracking_branches>> ginagamit namin ang `git branch -u` na pagpipilian upang mag-set up ng isang branch sa pagsubaybay.

Sa panghuli, tinalakay namin kung ano ang ginagawa nito sa background sa <<_git_internals#_git_refs>>.

==== git checkout

Ang command na `git checkout` ay ginagamit upang lumipat ng mga sanga at suriin ang nilalaman sa iyong gumaganang direktoryo.

Una naming nakatagpo ang command sa <<_git_branching#_switching_branches>> kasama ang command na `git branch`.

Nakita namin kung paano gamitin ito upang simulan ang pagsubaybay ng mga sanga gamit ang `--track` flag sa <<_git_branching#_tracking_branches>>.

Ginagamit namin ito upang maipakita muli ang mga magkasalungat na file sa `--conflict = diff3` sa <<_git_tools#_checking_out_conflicts>>.

Pumunta kami sa mas detalyadong detalye sa kaugnayan nito sa `git reset` sa <<_git_tools#_git_reset>>.

Sa panghuli, pumunta kami sa ilang detalye ng pagpapatupad sa <<_git_internals#_the_head>>.

==== git merge

Ang tool na `git merge` ay ginagamit upang pagsamahin ang isa o higit pang mga branch sa branch na iyong sinuri.
Susubukan nito ang kasalukuyang branch sa resulta ng pagsasama.

Ang `git merge` command ay unang ipinakilala sa <<_git_branching#_basic_branching>>.
Kahit na ito ay ginagamit sa iba't ibang mga lugar sa aklat, napakakaunting mga pagkakaiba-iba ng 'merge` command - sa pangkalahatan lamang `git pagsamahin <branch>` na may pangalan ng solong branch na nais mong pagsamahin.

Tinalakay namin kung paano gumawa ng isang squashed merge (kung saan ang Git ay nagpahiwatig na gumagana ang merge ngunit nagpapanggap lamang ito na tulad ng isang bagong commit na hindi naitala ang kasaysayan ng branch na pinagsasama mo) sa pinakadulo ng <<_distributed_git#_public_project>>.

Maramin din kaming tinalakay tungkol sa proseso ng pagsasama at utos, kabilang ang `-Xignore-space-change` na ustos at ang` --abort` na flag upang i-abort ang problema sa pag-merge sa <<_git_tools#_advanced_merging>>.

Natutunan namin kung paano i-verify ang mga lagda bago i-merge kung ang iyong proyekto ay gumagamit ng pag-sign na GPG sa <<_git_tools#_signing_commits>>.

Sa panghuli, natutunan namin ang tungkol sa pagsasama ng Subtree sa <<_git_tools#_subtree_merge>>.

==== git mergetool

Ang `git mergetool` utos ay naglulunsad lamang ng isang panlabas na merge helper kung sakaling mayroon kang mga isyu sa isang pagsali sa Git.

Binanggit namin ito nang mabilis sa <<_git_branching#_basic_merge_conflicts>> at pumunta sa detalye kung paano ipatupad ang iyong sariling panlabas na tool sa pagsasama sa <<_customizing_git#_external_merge_tools>>.

==== git log

Ang `git log` na utos ay ginamit upang mapakita ang mga maabot na nakatalang kasaysayang ng proyekto simula sa pinakabagong commit snapshot na pababa. Sa pangkaraniwan ipinapakita lamang nito ang kasaysayan ng kasalukayang branch, subalit maaring magbigay ng kaibahan o kahit maraming mga head or mga branch kung saan maari mong ma traverse. Ito ay madalas nagpapakita din ng mga kaibahan sa pagitan ng dalawa o maraming pang branch sa antas ng commit.

Ang utos na ito ay ginagamit sa halos lahat ng kabanata ng libro para mapakita ang kasaysayan ng proyekto.

Pinakilala namin ang utos at tinalakay ito ng malalim sa <<_git_basics_chapter#_viewing_history>>.
Doon tiningnan namin sa `-p` at `--stat` na opsyon para makuha ang idea kung ano ang pinakilala sa bawat commit at ang `--pretty` at `--oneline` na mga opsyon para makita ang kasaysayan na mas maikli, kasama ang iilang petsa at mga opsyon sa pagsasalang ng may-akda.

Sa <<_git_branching#_create_new_branch>> ginamit namin ito kasama ang `--decorate` na opsyon para madaling mailarawan kung saan ang ating mga branch pointer ay nakalagay at ginamit din namin ang `--graph` na opsyon para makita kung ano ang hitsura ng mga palayong kasaysayan.

Sa <<_distributed_git#_private_team>> at <<_git_tools#_commit_ranges>> aming tinalakay ang `branchA..branchB` na syntax para gamitin ang `git log` na utos para makita kung ano ang kaibahan sa isang katugong branch sa iba pang branch.
Sa <<_git_tools#_commit_ranges>> malawak naming tinalakay ito.

In <<_git_tools#_merge_log>> and <<_git_tools#_triple_dot>> we cover using the `branchA...branchB` format and the `--left-right` syntax to see what is in one branch or the other but not in both.
In <<_git_tools#_merge_log>> we also look at how to use the `--merge` option to help with merge conflict debugging as well as using the `--cc` option to look at merge commit conflicts in your history.

In <<_git_reflog>> we use the `-g` option to view the Git reflog through this tool instead of doing branch traversal.

In <<_git_tools#_searching>> we look at using the `-S` and `-L` options to do fairly sophisticated searches for something that happened historically in the code such as seeing the history of a function.

In <<_git_tools#_signing_commits>> we see how to use `--show-signature` to add a validation string to each commit in the `git log` output based on if it was validly signed or not.

==== git stash

The `git stash` command is used to temporarily store uncommitted work in order to clean out your working directory without having to commit unfinished work on a branch.

This is basically entirely covered in <<_git_tools#_git_stashing>>.

==== git tag

The `git tag` command is used to give a permanent bookmark to a specific point in the code history.
Generally this is used for things like releases.

This command is introduced and covered in detail in <<_git_basics_chapter#_git_tagging>> and we use it in practice in <<_distributed_git#_tagging_releases>>.

We also cover how to create a GPG signed tag with the `-s` flag and verify one with the `-v` flag in <<_git_tools#_signing>>.


=== Sharing and Updating Projects

There are not very many commands in Git that access the network, nearly all of the commands operate on the local database.
When you are ready to share your work or pull changes from elsewhere, there are a handful of commands that deal with remote repositories.

==== git fetch

The `git fetch` command communicates with a remote repository and fetches down all the information that is in that repository that is not in your current one and stores it in your local database.

We first look at this command in <<_git_basics_chapter#_fetching_and_pulling>> and we continue to see examples of it use in <<_git_branching#_remote_branches>>.

We also use it in several of the examples in <<_distributed_git#_contributing_project>>.

We use it to fetch a single specific reference that is outside of the default space in <<_github#_pr_refs>> and we see how to fetch from a bundle in <<_git_tools#_bundling>>.

We set up highly custom refspecs in order to make `git fetch` do something a little different than the default in <<_git_internals#_refspec>>.

==== git pull

The `git pull` command is basically a combination of the `git fetch` and `git merge` commands, where Git will fetch from the remote you specify and then immediately try to merge it into the branch you're on.

We introduce it quickly in <<_git_basics_chapter#_fetching_and_pulling>> and show how to see what it will merge if you run it in <<_git_basics_chapter#_inspecting_remote>>.

We also see how to use it to help with rebasing difficulties in <<_git_branching#_rebase_rebase>>.

We show how to use it with a URL to pull in changes in a one-off fashion in <<_distributed_git#_checking_out_remotes>>.

Finally, we very quickly mention that you can use the `--verify-signatures` option to it in order to verify that commits you are pulling have been GPG signed in <<_git_tools#_signing_commits>>.

==== git push

The `git push` command is used to communicate with another repository, calculate what your local database has that the remote one does not, and then pushes the difference into the other repository.
It requires write access to the other repository and so normally is authenticated somehow.

We first look at the `git push` command in <<_git_basics_chapter#_pushing_remotes>>.
Here we cover the basics of pushing a branch to a remote repository.
In <<_git_branching#_pushing_branches>> we go a little deeper into pushing specific branches and in <<_git_branching#_tracking_branches>> we see how to set up tracking branches to automatically push to.
In <<_git_branching#_delete_branches>> we use the `--delete` flag to delete a branch on the server with `git push`.

Throughout <<_distributed_git#_contributing_project>> we see several examples of using `git push` to share work on branches through multiple remotes.

We see how to use it to share tags that you have made with the `--tags` option in <<_git_basics_chapter#_sharing_tags>>.

In <<_git_tools#_publishing_submodules>> we use the `--recurse-submodules` option to check that all of our submodules work has been published before pushing the superproject, which can be really helpful when using submodules.

In <<_customizing_git#_other_client_hooks>> we talk briefly about the `pre-push` hook, which is a script we can setup to run before a push completes to verify that it should be allowed to push.

Finally, in <<_git_internals#_pushing_refspecs>> we look at pushing with a full refspec instead of the general shortcuts that are normally used.
This can help you be very specific about what work you wish to share.

==== git remote

The `git remote` command is a management tool for your record of remote repositories.
It allows you to save long URLs as short handles, such as ``origin'' so you don't have to type them out all the time.
You can have several of these and the `git remote` command is used to add, change and delete them.

This command is covered in detail in <<_git_basics_chapter#_remote_repos>>, including listing, adding, removing and renaming them.

It is used in nearly every subsequent chapter in the book too, but always in the standard `git remote add <name> <url>` format.

==== git archive

The `git archive` command is used to create an archive file of a specific snapshot of the project.

We use `git archive` to create a tarball of a project for sharing in <<_distributed_git#_preparing_release>>.

==== git submodule

The `git submodule` command is used to manage external repositories within a normal repositories.
This could be for libraries or other types of shared resources.
The `submodule` command has several sub-commands (`add`, `update`, `sync`, etc) for managing these resources.

This command is only mentioned and entirely covered in <<_git_tools#_git_submodules>>.

=== Inspection and Comparison

==== git show

The `git show` command can show a Git object in a simple and human readable way.
Normally you would use this to show the information about a tag or a commit.

We first use it to show annotated tag information in <<_git_basics_chapter#_annotated_tags>>.

Later we use it quite a bit in <<_git_tools#_revision_selection>> to show the commits that our various revision selections resolve to.

One of the more interesting things we do with `git show` is in <<_git_tools#_manual_remerge>> to extract specific file contents of various stages during a merge conflict.

==== git shortlog

The `git shortlog` command is used to summarize the output of `git log`.
It will take many of the same options that the `git log` command will but instead of listing out all of the commits it will present a summary of the commits grouped by author.

We showed how to use it to create a nice changelog in <<_distributed_git#_the_shortlog>>.

==== git describe

The `git describe` command is used to take anything that resolves to a commit and produces a string that is somewhat human-readable and will not change.
It's a way to get a description of a commit that is as unambiguous as a commit SHA-1 but more understandable.

We use `git describe` in <<_distributed_git#_build_number>> and <<_distributed_git#_preparing_release>> to get a string to name our release file after.


=== Debugging

Git has a couple of commands that are used to help debug an issue in your code.
This ranges from figuring out where something was introduced to figuring out who introduced it.

==== git bisect

The `git bisect` tool is an incredibly helpful debugging tool used to find which specific commit was the first one to introduce a bug or problem by doing an automatic binary search.

It is fully covered in <<_git_tools#_binary_search>> and is only mentioned in that section.

==== git blame

The `git blame` command annotates the lines of any file with which commit was the last one to introduce a change to each line of the file and what person authored that commit.
This is helpful in order to find the person to ask for more information about a specific section of your code.

It is covered in <<_git_tools#_file_annotation>> and is only mentioned in that section.

==== git grep

The `git grep` command can help you find any string or regular expression in any of the files in your source code, even older versions of your project.

It is covered in <<_git_grep>> and is only mentioned in that section.

=== Patching

A few commands in Git are centered around the concept of thinking of commits in terms of the changes they introduce, as though the commit series is a series of patches.
These commands help you manage your branches in this manner.

==== git cherry-pick

The `git cherry-pick` command is used to take the change introduced in a single Git commit and try to re-introduce it as a new commit on the branch you're currently on.
This can be useful to only take one or two commits from a branch individually rather than merging in the branch which takes all the changes.

Cherry picking is described and demonstrated in <<_distributed_git#_rebase_cherry_pick>>.

==== git rebase

The `git rebase` command is basically an automated `cherry-pick`.
It determines a series of commits and then cherry-picks them one by one in the same order somewhere else.

Rebasing is covered in detail in <<_git_branching#_rebasing>>, including covering the collaborative issues involved with rebasing branches that are already public.

We use it in practice during an example of splitting your history into two separate repositories in <<_git_tools#_replace>>, using the `--onto` flag as well.

We go through running into a merge conflict during rebasing in <<_git_tools#_rerere>>.

We also use it in an interactive scripting mode with the `-i` option in <<_git_tools#_changing_multiple>>.

==== git revert

The `git revert` command is essentially a reverse `git cherry-pick`.
It creates a new commit that applies the exact opposite of the change introduced in the commit you're targeting, essentially undoing or reverting it.

We use this in <<_git_tools#_reverse_commit>> to undo a merge commit.

=== Email

Many Git projects, including Git itself, are entirely maintained over mailing lists.
Git has a number of tools built into it that help make this process easier, from generating patches you can easily email to applying those patches from an email box.

==== git apply

The `git apply` command applies a patch created with the `git diff` or even GNU diff command.
It is similar to what the `patch` command might do with a few small differences.

We demonstrate using it and the circumstances in which you might do so in <<_distributed_git#_patches_from_email>>.

==== git am

The `git am` command is used to apply patches from an email inbox, specifically one that is mbox formatted.
This is useful for receiving patches over email and applying them to your project easily.

We covered usage and workflow around `git am` in <<_git_am>> including using the `--resolved`, `-i` and `-3` options.

There are also a number of hooks you can use to help with the workflow around `git am` and they are all covered in <<_customizing_git#_email_hooks>>.

We also use it to apply patch formatted GitHub Pull Request changes in <<_github#_email_notifications>>.

==== git format-patch

The `git format-patch` command is used to generate a series of patches in mbox format that you can use to send to a mailing list properly formatted.

We go through an example of contributing to a project using the `git format-patch` tool in <<_distributed_git#_project_over_email>>.

==== git imap-send

The `git imap-send` command uploads a mailbox generated with `git format-patch` into an IMAP drafts folder.

We go through an example of contributing to a project by sending patches with the `git imap-send` tool in <<_distributed_git#_project_over_email>>.

==== git send-email

The `git send-email` command is used to send patches that are generated with `git format-patch` over email.

We go through an example of contributing to a project by sending patches with the `git send-email` tool in <<_distributed_git#_project_over_email>>.

==== git request-pull

The `git request-pull` command is simply used to generate an example message body to email to someone.
If you have a branch on a public server and want to let someone know how to integrate those changes without sending the patches over email, you can run this command and send the output to the person you want to pull the changes in.

We demonstrate how to use `git request-pull` to generate a pull message in <<_distributed_git#_public_project>>.

=== External Systems

Git comes with a few commands to integrate with other version control systems.

==== git svn

The `git svn` command is used to communicate with the Subversion version control system as a client.
This means you can use Git to checkout from and commit to a Subversion server.

This command is covered in depth in <<_git_svn>>.

==== git fast-import

For other version control systems or importing from nearly any format, you can use `git fast-import` to quickly map the other format to something Git can easily record.

This command is covered in depth in <<_git_and_other_systems#_custom_importer>>.

=== Administration

If you're administering a Git repository or need to fix something in a big way, Git provides a number of administrative commands to help you out.

==== git gc

The `git gc` command runs ``garbage collection'' on your repository, removing unnecessary files in your database and packing up the remaining files into a more efficient format.

This command normally runs in the background for you, though you can manually run it if you wish.
We go over some examples of this in <<_git_gc>>.

==== git fsck

The `git fsck` command is used to check the internal database for problems or inconsistencies.

We only quickly use this once in <<_git_internals#_data_recovery>> to search for dangling objects.

==== git reflog

The `git reflog` command goes through a log of where all the heads of your branches have been as you work to find commits you may have lost through rewriting histories.

We cover this command mainly in <<_git_reflog>>, where we show normal usage to and how to use `git log -g` to view the same information with `git log` output.

We also go through a practical example of recovering such a lost branch in <<_git_internals#_data_recovery>>.

==== git filter-branch

The `git filter-branch` command is used to rewrite loads of commits according to certain patterns, like removing a file everywhere or filtering the entire repository down to a single subdirectory for extracting a project.

In <<_git_tools#_removing_file_every_commit>> we explain the command and explore several different options such as `--commit-filter`, `--subdirectory-filter` and `--tree-filter`.

In <<_git_and_other_systems#_git_p4>> and <<_git_and_other_systems#_git_tfs>> we use it to fix up imported external repositories.


=== Plumbing Commands

There were also quite a number of lower level plumbing commands that we encountered in the book.

The first one we encounter is `ls-remote` in <<_github#_pr_refs>> which we use to look at the raw references on the server.

We use `ls-files` in <<_git_tools#_manual_remerge>>, <<_git_tools#_rerere>> and <<_git_tools#_the_index>> to take a more raw look at what your staging area looks like.

We also mention `rev-parse` in <<_git_tools#_branch_references>> to take just about any string and turn it into an object SHA-1.

However, most of the low level plumbing commands we cover are in <<_git_internals#_git_internals>>, which is more or less what the chapter is focused on.
We tried to avoid use of them throughout most of the rest of the book.
